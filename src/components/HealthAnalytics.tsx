import React, { useState, useEffect } from "react";
import { useLanguage } from "../contexts/LanguageContext";
import {
  voiceService,
  HealthMetric,
  HealthInsight,
  HealthGoal,
} from "../services/openai";

export default function HealthAnalytics() {
  const { currentLanguage } = useLanguage();
  const [activeTab, setActiveTab] = useState("overview");
  const [timeRange, setTimeRange] = useState("7d");
  const [healthMetrics, setHealthMetrics] = useState<HealthMetric[]>([]);
  const [healthGoals, setHealthGoals] = useState<HealthGoal[]>([]);
  const [insights, setInsights] = useState<HealthInsight[]>([]);
  const [isLoading, setIsLoading] = useState(true);

  // Translation texts
  const texts = {
    english: {
      smartHealthAnalytics: "Smart Health Analytics",
      aiPoweredInsights: "AI-powered insights into your health trends and patterns",
      sevenDays: "7 Days",
      thirtyDays: "30 Days",
      threeMonths: "3 Months",
      oneYear: "1 Year",
      overview: "Overview",
      metrics: "Metrics",
      goals: "Goals",
      aiInsights: "AI Insights",
      loadingHealthAnalytics: "Loading Health Analytics",
      analyzingHealthData: "Analyzing your health data and generating insights...",
      heartRate: "Heart Rate",
      bloodPressure: "Blood Pressure",
      bpm: "bpm",
      mmHg: "mmHg",
      normal: "normal",
      warning: "warning",
      critical: "critical",
      stable: "Stable",
      increasing: "Increasing",
      decreasing: "Decreasing",
      recentAIInsights: "Recent AI Insights",
      targetRange: "Target Range",
      progress: "Progress",
      complete: "Complete",
      toGo: "to go",
      goalAchieved: "Goal achieved! ЁЯОЙ",
      updateProgress: "Update Progress",
      setNewHealthGoal: "Set a New Health Goal",
      trackProgressBetterHealth: "Track your progress towards better health",
      addNewGoal: "+ Add New Goal",
      aiPoweredHealthInsights: "AI-Powered Health Insights",
      highPriority: "high priority",
      mediumPriority: "medium priority",
      lowPriority: "low priority",
      overallHealthScore: "Overall Health Score",
      goodKeepUp: "Good - Keep up the great work!",
    },
    hindi: {
      smartHealthAnalytics: "рд╕реНрдорд╛рд░реНрдЯ рд╕реНрд╡рд╛рд╕реНрдереНрдп рд╡рд┐рд╢реНрд▓реЗрд╖рдг",
      aiPoweredInsights: "рдЖрдкрдХреЗ рд╕реНрд╡рд╛рд╕реНрдереНрдп рд░реБрдЭрд╛рдиреЛрдВ рдФрд░ рдкреИрдЯрд░реНрди рдореЗрдВ рдПрдЖрдИ-рд╕рдВрдЪрд╛рд▓рд┐рдд рдЕрдВрддрд░реНрджреГрд╖реНрдЯрд┐",
      sevenDays: "7 рджрд┐рди",
      thirtyDays: "30 рджрд┐рди",
      threeMonths: "3 рдорд╣реАрдиреЗ",
      oneYear: "1 рд╡рд░реНрд╖",
      overview: "рдЕрд╡рд▓реЛрдХрди",
      metrics: "рдореЗрдЯреНрд░рд┐рдХреНрд╕",
      goals: "рд▓рдХреНрд╖реНрдп",
      aiInsights: "рдПрдЖрдИ рдЕрдВрддрд░реНрджреГрд╖реНрдЯрд┐",
      loadingHealthAnalytics: "рд╕реНрд╡рд╛рд╕реНрдереНрдп рд╡рд┐рд╢реНрд▓реЗрд╖рдг рд▓реЛрдб рд╣реЛ рд░рд╣рд╛ рд╣реИ",
      analyzingHealthData: "рдЖрдкрдХреЗ рд╕реНрд╡рд╛рд╕реНрдереНрдп рдбреЗрдЯрд╛ рдХрд╛ рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдФрд░ рдЕрдВрддрд░реНрджреГрд╖реНрдЯрд┐ рдЬреЗрдирд░реЗрдЯ рдХреА рдЬрд╛ рд░рд╣реА рд╣реИ...",
      heartRate: "рд╣реГрджрдп рдЧрддрд┐",
      bloodPressure: "рд░рдХреНрддрдЪрд╛рдк",
      bpm: "рдмреАрдкреАрдПрдо",
      mmHg: "рдПрдордПрдордПрдЪрдЬреА",
      normal: "рд╕рд╛рдорд╛рдиреНрдп",
      warning: "рдЪреЗрддрд╛рд╡рдиреА",
      critical: "рдЧрдВрднреАрд░",
      stable: "рд╕реНрдерд┐рд░",
      increasing: "рдмрдврд╝ рд░рд╣рд╛ рд╣реИ",
      decreasing: "рдШрдЯ рд░рд╣рд╛ рд╣реИ",
      recentAIInsights: "рд╣рд╛рд▓ рдХреА рдПрдЖрдИ рдЕрдВрддрд░реНрджреГрд╖реНрдЯрд┐",
      targetRange: "рд▓рдХреНрд╖реНрдп рд╕реАрдорд╛",
      progress: "рдкреНрд░рдЧрддрд┐",
      complete: "рдкреВрд░реНрдг",
      toGo: "рдмрд╛рдХреА",
      goalAchieved: "рд▓рдХреНрд╖реНрдп рд╣рд╛рд╕рд┐рд▓! ЁЯОЙ",
      updateProgress: "рдкреНрд░рдЧрддрд┐ рдЕрдкрдбреЗрдЯ рдХрд░реЗрдВ",
      setNewHealthGoal: "рдирдпрд╛ рд╕реНрд╡рд╛рд╕реНрдереНрдп рд▓рдХреНрд╖реНрдп рд╕реЗрдЯ рдХрд░реЗрдВ",
      trackProgressBetterHealth: "рдмреЗрд╣рддрд░ рд╕реНрд╡рд╛рд╕реНрдереНрдп рдХреА рджрд┐рд╢рд╛ рдореЗрдВ рдЕрдкрдиреА рдкреНрд░рдЧрддрд┐ рдХреЛ рдЯреНрд░реИрдХ рдХрд░реЗрдВ",
      addNewGoal: "+ рдирдпрд╛ рд▓рдХреНрд╖реНрдп рдЬреЛрдбрд╝реЗрдВ",
      aiPoweredHealthInsights: "рдПрдЖрдИ-рд╕рдВрдЪрд╛рд▓рд┐рдд рд╕реНрд╡рд╛рд╕реНрдереНрдп рдЕрдВрддрд░реНрджреГрд╖реНрдЯрд┐",
      highPriority: "рдЙрдЪреНрдЪ рдкреНрд░рд╛рдердорд┐рдХрддрд╛",
      mediumPriority: "рдордзреНрдпрдо рдкреНрд░рд╛рдердорд┐рдХрддрд╛",
      lowPriority: "рдХрдо рдкреНрд░рд╛рдердорд┐рдХрддрд╛",
      overallHealthScore: "рд╕рдордЧреНрд░ рд╕реНрд╡рд╛рд╕реНрдереНрдп рд╕реНрдХреЛрд░",
      goodKeepUp: "рдЕрдЪреНрдЫрд╛ - рдмреЗрд╣рддрд░реАрди рдХрд╛рдо рдЬрд╛рд░реА рд░рдЦреЗрдВ!",
    },
    tamil: {
      smartHealthAnalytics: "ро╕рпНрооро╛ро░рпНроЯрпН ро╣рпЖро▓рпНродрпН роЕройро╛ро▓ро┐роЯрпНроЯро┐роХрпНро╕рпН",
      aiPoweredInsights: "роЙроЩрпНроХро│рпН роЪрпБроХро╛родро╛ро░ рокрпЛроХрпНроХрпБроХро│рпН рооро▒рпНро▒рпБроорпН ро╡роЯро┐ро╡роЩрпНроХро│ро┐ро▓рпН AI-роЗропроЩрпНроХрпБроорпН роирпБрогрпНрогро▒ро┐ро╡рпБ",
      sevenDays: "7 роиро╛роЯрпНроХро│рпН",
      thirtyDays: "30 роиро╛роЯрпНроХро│рпН",
      threeMonths: "3 рооро╛родроЩрпНроХро│рпН",
      oneYear: "1 ро╡ро░рпБроЯроорпН",
      overview: "роорпЗро▓рпЛроЯрпНроЯрооро╛рой рокро╛ро░рпНро╡рпИ",
      metrics: "роЕро│ро╡рпАроЯрпБроХро│рпН",
      goals: "роЗро▓роХрпНроХрпБроХро│рпН",
      aiInsights: "AI роирпБрогрпНрогро▒ро┐ро╡рпБ",
      loadingHealthAnalytics: "роЪрпБроХро╛родро╛ро░ рокроХрпБрокрпНрокро╛ропрпНро╡рпБ роПро▒рпНро▒рокрпНрокроЯрпБроХро┐ро▒родрпБ",
      analyzingHealthData: "роЙроЩрпНроХро│рпН роЪрпБроХро╛родро╛ро░ родро░ро╡рпИ рокроХрпБрокрпНрокро╛ропрпБроорпН рооро▒рпНро▒рпБроорпН роирпБрогрпНрогро▒ро┐ро╡рпБроХро│рпИ роЙро░рпБро╡ро╛роХрпНроХрпБроХро┐ро▒родрпБ...",
      heartRate: "роЗродроп родрпБроЯро┐рокрпНрокрпБ",
      bloodPressure: "роЗро░родрпНрод роЕро┤рпБродрпНродроорпН",
      bpm: "рокро┐рокро┐роОроорпН",
      mmHg: "роОроорпНроОроорпНроОроЪрпНроЬро┐",
      normal: "роЪро╛родро╛ро░рог",
      warning: "роОроЪрпНроЪро░ро┐роХрпНроХрпИ",
      critical: "роХроЯрпБроорпИропро╛рой",
      stable: "роиро┐ро▓рпИропро╛рой",
      increasing: "роЕродро┐роХро░ро┐родрпНродрпБ ро╡ро░рпБроХро┐ро▒родрпБ",
      decreasing: "роХрпБро▒рпИроирпНродрпБ ро╡ро░рпБроХро┐ро▒родрпБ",
      recentAIInsights: "роЪроорпАрокродрпНродро┐роп AI роирпБрогрпНрогро▒ро┐ро╡рпБроХро│рпН",
      targetRange: "роЗро▓роХрпНроХрпБ ро╡ро░роорпНрокрпБ",
      progress: "роорпБройрпНройрпЗро▒рпНро▒роорпН",
      complete: "роорпБро┤рпБроорпИропро╛рой",
      toGo: "рокрпЛроХ ро╡рпЗрогрпНроЯрпБроорпН",
      goalAchieved: "роЗро▓роХрпНроХрпБ роЕроЯрпИроирпНродродрпБ! ЁЯОЙ",
      updateProgress: "роорпБройрпНройрпЗро▒рпНро▒родрпНродрпИ рокрпБродрпБрокрпНрокро┐роХрпНроХро╡рпБроорпН",
      setNewHealthGoal: "рокрпБродро┐роп роЪрпБроХро╛родро╛ро░ роЗро▓роХрпНроХрпИ роЕроорпИроХрпНроХро╡рпБроорпН",
      trackProgressBetterHealth: "роЪро┐ро▒роирпНрод роЪрпБроХро╛родро╛ро░родрпНродрпИ роирпЛроХрпНроХро┐роп роЙроЩрпНроХро│рпН роорпБройрпНройрпЗро▒рпНро▒родрпНродрпИ роХрогрпНроХро╛рогро┐роХрпНроХро╡рпБроорпН",
      addNewGoal: "+ рокрпБродро┐роп роЗро▓роХрпНроХрпИ роЪрпЗро░рпНроХрпНроХро╡рпБроорпН",
      aiPoweredHealthInsights: "AI-роЗропроЩрпНроХрпБроорпН роЪрпБроХро╛родро╛ро░ роирпБрогрпНрогро▒ро┐ро╡рпБроХро│рпН",
      highPriority: "роЙропро░рпН роорпБройрпНройрпБро░ро┐роорпИ",
      mediumPriority: "роироЯрпБродрпНродро░ роорпБройрпНройрпБро░ро┐роорпИ",
      lowPriority: "роХрпБро▒рпИроирпНрод роорпБройрпНройрпБро░ро┐роорпИ",
      overallHealthScore: "роТроЯрпНроЯрпБроорпКродрпНрод роЪрпБроХро╛родро╛ро░ роородро┐рокрпНрокрпЖрогрпН",
      goodKeepUp: "роиро▓рпНро▓родрпБ - роЪро┐ро▒роирпНрод ро╡рпЗро▓рпИропрпИродрпН родрпКроЯро░рпБроЩрпНроХро│рпН!",
    },
    telugu: {
      smartHealthAnalytics: "р░╕р▒Нр░ор░╛р░░р▒Нр░Яр▒Н р░╣р▒Жр░▓р▒Нр░др▒Н р░Ер░ир░▓р░┐р░Яр░┐р░Хр▒Нр░╕р▒Н",
      aiPoweredInsights: "р░ор▒А р░Жр░░р▒Лр░Чр▒Нр░п р░Яр▒Нр░░р▒Жр░Вр░бр▒Нр░▓р▒Б р░ор░░р░┐р░пр▒Б р░ир░ор▒Вр░ир░╛р░▓р░▓р▒Л AI-р░╢р░Хр▒Нр░др░┐р░др▒Л р░Хр▒Вр░бр░┐р░и р░Ер░Вр░др░░р▒Нр░жр▒Гр░╖р▒Нр░Яр▒Бр░▓р▒Б",
      sevenDays: "7 р░░р▒Лр░Ьр▒Бр░▓р▒Б",
      thirtyDays: "30 р░░р▒Лр░Ьр▒Бр░▓р▒Б",
      threeMonths: "3 р░ир▒Жр░▓р░▓р▒Б",
      oneYear: "1 р░╕р░Вр░╡р░др▒Нр░╕р░░р░В",
      overview: "р░Ер░╡р░▓р▒Лр░Хр░ир░В",
      metrics: "р░ор▒Жр░Яр▒Нр░░р░┐р░Хр▒Нр░╕р▒Н",
      goals: "р░▓р░Хр▒Нр░╖р▒Нр░пр░╛р░▓р▒Б",
      aiInsights: "AI р░Ер░Вр░др░░р▒Нр░жр▒Гр░╖р▒Нр░Яр▒Бр░▓р▒Б",
      loadingHealthAnalytics: "р░Жр░░р▒Лр░Чр▒Нр░п р░╡р░┐р░╢р▒Нр░▓р▒Зр░╖р░г р░▓р▒Лр░бр▒Н р░Ер░╡р▒Бр░др▒Лр░Вр░жр░┐",
      analyzingHealthData: "р░ор▒А р░Жр░░р▒Лр░Чр▒Нр░п р░бр▒Зр░Яр░╛р░ир▒Б р░╡р░┐р░╢р▒Нр░▓р▒Зр░╖р░┐р░╕р▒Нр░др▒Лр░Вр░жр░┐ р░ор░░р░┐р░пр▒Б р░Ер░Вр░др░░р▒Нр░жр▒Гр░╖р▒Нр░Яр▒Бр░▓р░ир▒Б р░Ьр▒Жр░ир░░р▒Зр░Яр▒Н р░Ър▒Зр░╕р▒Нр░др▒Лр░Вр░жр░┐...",
      heartRate: "р░╣р▒Гр░жр░п р░╕р▒Нр░кр░Вр░жр░и",
      bloodPressure: "р░░р░Хр▒Нр░др░кр▒Лр░Яр▒Б",
      bpm: "р░мр░┐р░кр░┐р░Ор░В",
      mmHg: "р░Ор░Вр░Ор░Вр░╣р▒Жр░Ър▒Нр░Ьр░┐",
      normal: "р░╕р░╛р░зр░╛р░░р░г",
      warning: "р░╣р▒Жр░Ър▒Нр░Ър░░р░┐р░Х",
      critical: "р░Хр▒Нр░░р░┐р░Яр░┐р░Хр░▓р▒Н",
      stable: "р░╕р▒Нр░ер░┐р░░р░ор▒Ир░и",
      increasing: "р░кр▒Жр░░р▒Бр░Чр▒Бр░др▒Лр░Вр░жр░┐",
      decreasing: "р░др░Чр▒Нр░Чр▒Бр░др▒Лр░Вр░жр░┐",
      recentAIInsights: "р░Зр░Яр▒Ар░╡р░▓р░┐ AI р░Ер░Вр░др░░р▒Нр░жр▒Гр░╖р▒Нр░Яр▒Бр░▓р▒Б",
      targetRange: "р░▓р░Хр▒Нр░╖р▒Нр░п р░кр░░р░┐р░зр░┐",
      progress: "р░кр▒Бр░░р▒Лр░Чр░др░┐",
      complete: "р░кр▒Вр░░р▒Нр░др░┐",
      toGo: "р░╡р▒Жр░│р▒Нр░│р░╛р░▓р░┐",
      goalAchieved: "р░▓р░Хр▒Нр░╖р▒Нр░пр░В р░╕р░╛р░зр░┐р░Вр░Ър░мр░бр░┐р░Вр░жр░┐! ЁЯОЙ",
      updateProgress: "р░кр▒Бр░░р▒Лр░Чр░др░┐р░ир░┐ р░Ер░кр▒Нр░бр▒Зр░Яр▒Н р░Ър▒Зр░пр░Вр░бр░┐",
      setNewHealthGoal: "р░Хр▒Кр░др▒Нр░д р░Жр░░р▒Лр░Чр▒Нр░п р░▓р░Хр▒Нр░╖р▒Нр░пр░╛р░ир▒Нр░ир░┐ р░╕р▒Жр░Яр▒Н р░Ър▒Зр░пр░Вр░бр░┐",
      trackProgressBetterHealth: "р░ор▒Жр░░р▒Бр░Чр▒Ир░и р░Жр░░р▒Лр░Чр▒Нр░пр░В р░╡р▒Ир░кр▒Б р░ор▒А р░кр▒Бр░░р▒Лр░Чр░др░┐р░ир░┐ р░Яр▒Нр░░р░╛р░Хр▒Н р░Ър▒Зр░пр░Вр░бр░┐",
      addNewGoal: "+ р░Хр▒Кр░др▒Нр░д р░▓р░Хр▒Нр░╖р▒Нр░пр░╛р░ир▒Нр░ир░┐ р░Ьр▒Лр░бр░┐р░Вр░Ър░Вр░бр░┐",
      aiPoweredHealthInsights: "AI-р░╢р░Хр▒Нр░др░┐р░др▒Л р░Хр▒Вр░бр░┐р░и р░Жр░░р▒Лр░Чр▒Нр░п р░Ер░Вр░др░░р▒Нр░жр▒Гр░╖р▒Нр░Яр▒Бр░▓р▒Б",
      highPriority: "р░Ер░зр░┐р░Х р░кр▒Нр░░р░╛р░зр░╛р░ир▒Нр░пр░д",
      mediumPriority: "р░ор░зр▒Нр░пр░╕р▒Нр░е р░кр▒Нр░░р░╛р░зр░╛р░ир▒Нр░пр░д",
      lowPriority: "р░др░Хр▒Нр░Хр▒Бр░╡ р░кр▒Нр░░р░╛р░зр░╛р░ир▒Нр░пр░д",
      overallHealthScore: "р░ор▒Кр░др▒Нр░др░В р░Жр░░р▒Лр░Чр▒Нр░п р░╕р▒Нр░Хр▒Лр░░р▒Н",
      goodKeepUp: "р░ор░Вр░Ър░┐р░жр░┐ - р░Чр▒Кр░кр▒Нр░к р░кр░ир░┐р░ир░┐ р░Хр▒Кр░ир░╕р░╛р░Чр░┐р░Вр░Ър░Вр░бр░┐!",
    },
    bengali: {
      smartHealthAnalytics: "рж╕рзНржорж╛рж░рзНржЯ рж╣рзЗрж▓рже ржЕрзНржпрж╛ржирж╛рж▓рж┐ржЯрж┐ржХрзНрж╕",
      aiPoweredInsights: "ржЖржкржирж╛рж░ рж╕рзНржмрж╛рж╕рзНржерзНржп ржкрзНрж░ржмржгрждрж╛ ржПржмржВ ржкрзНржпрж╛ржЯрж╛рж░рзНржирзЗ AI-ржЪрж╛рж▓рж┐ржд ржЕржирзНрждрж░рзНржжрзГрж╖рзНржЯрж┐",
      sevenDays: "рзн ржжрж┐ржи",
      thirtyDays: "рзйрзж ржжрж┐ржи",
      threeMonths: "рзй ржорж╛рж╕",
      oneYear: "рзз ржмржЫрж░",
      overview: "рж╕ржВржХрзНрж╖рж┐ржкрзНржд ржмрж┐ржмрж░ржг",
      metrics: "ржорзЗржЯрзНрж░рж┐ржХрзНрж╕",
      goals: "рж▓ржХрзНрж╖рзНржп",
      aiInsights: "AI ржЕржирзНрждрж░рзНржжрзГрж╖рзНржЯрж┐",
      loadingHealthAnalytics: "рж╕рзНржмрж╛рж╕рзНржерзНржп ржмрж┐рж╢рзНрж▓рзЗрж╖ржг рж▓рзЛржб рж╣ржЪрзНржЫрзЗ",
      analyzingHealthData: "ржЖржкржирж╛рж░ рж╕рзНржмрж╛рж╕рзНржерзНржп ржбрзЗржЯрж╛ ржмрж┐рж╢рзНрж▓рзЗрж╖ржг ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ ржПржмржВ ржЕржирзНрждрж░рзНржжрзГрж╖рзНржЯрж┐ рждрзИрж░рж┐ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...",
      heartRate: "рж╣рзГржжрж╕рзНржкржирзНржжржи",
      bloodPressure: "рж░ржХрзНрждржЪрж╛ржк",
      bpm: "ржмрж┐ржкрж┐ржПржо",
      mmHg: "ржПржоржПржоржПржЗржЪржЬрж┐",
      normal: "рж╕рзНржмрж╛ржнрж╛ржмрж┐ржХ",
      warning: "рж╕рждрж░рзНржХрждрж╛",
      critical: "рж╕ржВржХржЯржЬржиржХ",
      stable: "рж╕рзНржерж┐рждрж┐рж╢рзАрж▓",
      increasing: "ржмрзГржжрзНржзрж┐ ржкрж╛ржЪрзНржЫрзЗ",
      decreasing: "рж╣рзНрж░рж╛рж╕ ржкрж╛ржЪрзНржЫрзЗ",
      recentAIInsights: "рж╕рж╛ржорзНржкрзНрж░рждрж┐ржХ AI ржЕржирзНрждрж░рзНржжрзГрж╖рзНржЯрж┐",
      targetRange: "рж▓ржХрзНрж╖рзНржп ржкрж░рж┐рж╕рзАржорж╛",
      progress: "ржЕржЧрзНрж░ржЧрждрж┐",
      complete: "рж╕ржорзНржкрзВрж░рзНржг",
      toGo: "ржпрзЗрждрзЗ рж╣ржмрзЗ",
      goalAchieved: "рж▓ржХрзНрж╖рзНржп ржЕрж░рзНржЬрж┐ржд! ЁЯОЙ",
      updateProgress: "ржЕржЧрзНрж░ржЧрждрж┐ ржЖржкржбрзЗржЯ ржХрж░рзБржи",
      setNewHealthGoal: "ржирждрзБржи рж╕рзНржмрж╛рж╕рзНржерзНржп рж▓ржХрзНрж╖рзНржп рж╕рзЗржЯ ржХрж░рзБржи",
      trackProgressBetterHealth: "ржнрж╛рж▓ рж╕рзНржмрж╛рж╕рзНржерзНржпрзЗрж░ ржжрж┐ржХрзЗ ржЖржкржирж╛рж░ ржЕржЧрзНрж░ржЧрждрж┐ ржЯрзНрж░рзНржпрж╛ржХ ржХрж░рзБржи",
      addNewGoal: "+ ржирждрзБржи рж▓ржХрзНрж╖рзНржп ржпрзЛржЧ ржХрж░рзБржи",
      aiPoweredHealthInsights: "AI-ржЪрж╛рж▓рж┐ржд рж╕рзНржмрж╛рж╕рзНржерзНржп ржЕржирзНрждрж░рзНржжрзГрж╖рзНржЯрж┐",
      highPriority: "ржЙржЪрзНржЪ ржЕржЧрзНрж░рж╛ржзрж┐ржХрж╛рж░",
      mediumPriority: "ржорж╛ржЭрж╛рж░рж┐ ржЕржЧрзНрж░рж╛ржзрж┐ржХрж╛рж░",
      lowPriority: "ржХржо ржЕржЧрзНрж░рж╛ржзрж┐ржХрж╛рж░",
      overallHealthScore: "рж╕рж╛ржоржЧрзНрж░рж┐ржХ рж╕рзНржмрж╛рж╕рзНржерзНржп рж╕рзНржХрзЛрж░",
      goodKeepUp: "ржнрж╛рж▓ - ржжрзБрж░рзНржжрж╛ржирзНржд ржХрж╛ржЬ ржЪрж╛рж▓рж┐ржпрж╝рзЗ ржпрж╛ржи!",
    },
  };

  const getLocalText = (key: keyof typeof texts.english): string => {
    return (
      texts[currentLanguage as keyof typeof texts]?.[key] ||
      texts.english[key]
    );
  };

  useEffect(() => {
    const loadHealthData = async () => {
      setIsLoading(true);
      // Simulate loading health metrics and goals
      await new Promise((resolve) => setTimeout(resolve, 1500));

      const mockMetrics = [
        {
          id: "heart_rate",
          name: "Heart Rate",
          value: 72,
          unit: "bpm",
          trend: "stable" as const,
          status: "normal" as const,
          target: { min: 60, max: 100 },
          history: generateHealthHistory(70, 10, 7),
        },
        {
          id: "blood_pressure",
          name: "Blood Pressure",
          value: 125,
          unit: "mmHg",
          trend: "up" as const,
          status: "warning" as const,
          target: { min: 90, max: 120 },
          history: generateHealthHistory(120, 15, 7),
        },
        // ... other metrics
      ];
      setHealthMetrics(mockMetrics);

      const mockGoals = [
        {
          id: "weight_loss",
          title: "Lose Weight",
          target: 65,
          current: 68.5,
          unit: "kg",
          deadline: "2025-09-30",
          category: "fitness" as const,
        },
        // ... other goals
      ];
      setHealthGoals(mockGoals);

      // Generate AI insights
      try {
        const patientInfo = {
          age: "45",
          gender: "male",
          existingConditions: ["Hypertension"],
        }; // Replace with actual patient data
        const aiInsights = await voiceService.getPersonalizedHealthInsights(
          mockMetrics,
          patientInfo,
          currentLanguage,
        );
        setInsights(aiInsights);
      } catch (error) {
        console.error("Failed to load AI insights:", error);
      }

      setIsLoading(false);
    };

    loadHealthData();
  }, [timeRange, currentLanguage]);

  const generateHealthHistory = (
    baseValue: number,
    variance: number,
    days: number,
  ) => {
    const history = [];
    for (let i = days; i >= 0; i--) {
      const date = new Date();
      date.setDate(date.getDate() - i);
      const randomVariation = (Math.random() - 0.5) * variance;
      history.push({
        date: date.toISOString().split("T")[0],
        value: Math.round((baseValue + randomVariation) * 10) / 10,
      });
    }
    return history;
  };

  const getMetricColor = (status: string) => {
    switch (status) {
      case "normal":
        return "text-green-600 bg-green-100";
      case "warning":
        return "text-yellow-600 bg-yellow-100";
      case "critical":
        return "text-red-600 bg-red-100";
      default:
        return "text-gray-600 bg-gray-100";
    }
  };

  const getTrendIcon = (trend: string) => {
    switch (trend) {
      case "up":
        return "ЁЯУИ";
      case "down":
        return "ЁЯУЙ";
      case "stable":
        return "тЮбя╕П";
      default:
        return "тЮбя╕П";
    }
  };

  const getCategoryIcon = (category: string) => {
    switch (category) {
      case "fitness":
        return "ЁЯТк";
      case "nutrition":
        return "ЁЯеЧ";
      case "medication":
        return "ЁЯТК";
      case "lifestyle":
        return "ЁЯМЯ";
      default:
        return "ЁЯУК";
    }
  };

  const getInsightIcon = (type: string) => {
    switch (type) {
      case "warning":
        return "тЪая╕П";
      case "recommendation":
        return "ЁЯТб";
      case "achievement":
        return "ЁЯПЖ";
      default:
        return "тД╣я╕П";
    }
  };

  if (isLoading) {
    return (
      <div className="max-w-6xl mx-auto p-6">
        <div className="bg-white rounded-xl shadow-lg p-8 text-center">
          <div className="animate-spin w-16 h-16 border-4 border-blue-600 border-t-transparent rounded-full mx-auto mb-4"></div>
          <h2 className="text-xl font-semibold text-gray-700 mb-2">
            {getLocalText('loadingHealthAnalytics')}
          </h2>
          <p className="text-gray-500">
            {getLocalText('analyzingHealthData')}
          </p>
        </div>
      </div>
    );
  }

  return (
    <div className="max-w-6xl mx-auto p-6 space-y-6">
      {/* Header */}
      <div className="bg-gradient-to-r from-blue-600 to-purple-600 rounded-2xl p-6 text-white">
        <h1 className="text-2xl font-bold mb-2">ЁЯУК {getLocalText('smartHealthAnalytics')}</h1>
        <p className="text-blue-100">
          {getLocalText('aiPoweredInsights')}
        </p>

        {/* Time Range Selector */}
        <div className="mt-4 flex space-x-2">
          {["7d", "30d", "90d", "1y"].map((range) => (
            <button
              key={range}
              onClick={() => setTimeRange(range)}
              className={`px-3 py-1 rounded-lg text-sm font-medium transition-all ${
                timeRange === range
                  ? "bg-white text-blue-600"
                  : "bg-blue-500 hover:bg-blue-400 text-white"
              }`}
            >
              {range === "7d"
                ? getLocalText('sevenDays')
                : range === "30d"
                  ? getLocalText('thirtyDays')
                  : range === "90d"
                    ? getLocalText('threeMonths')
                    : getLocalText('oneYear')}
            </button>
          ))}
        </div>
      </div>

      {/* Navigation Tabs */}
      <div className="bg-white rounded-xl shadow-lg p-1">
        <div className="flex space-x-1">
          {[
            { id: "overview", nameKey: "overview", icon: "ЁЯУК" },
            { id: "metrics", nameKey: "metrics", icon: "ЁЯУИ" },
            { id: "goals", nameKey: "goals", icon: "ЁЯОп" },
            { id: "insights", nameKey: "aiInsights", icon: "ЁЯза" },
          ].map((tab) => (
            <button
              key={tab.id}
              onClick={() => setActiveTab(tab.id)}
              className={`flex items-center space-x-2 px-4 py-2 rounded-lg font-medium transition-all ${
                activeTab === tab.id
                  ? "bg-blue-600 text-white shadow-md"
                  : "text-gray-600 hover:bg-gray-100"
              }`}
            >
              <span>{tab.icon}</span>
              <span>{getLocalText(tab.nameKey as keyof typeof texts.english)}</span>
            </button>
          ))}
        </div>
      </div>

      {/* Overview Tab */}
      {activeTab === "overview" && (
        <div className="space-y-6">
          {/* Key Metrics Grid */}
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            {healthMetrics.slice(0, 6).map((metric) => (
              <div
                key={metric.id}
                className="bg-white rounded-xl shadow-lg p-6"
              >
                <div className="flex items-center justify-between mb-3">
                  <h3 className="font-semibold text-gray-800">{metric.name}</h3>
                  <span className="text-lg">{getTrendIcon(metric.trend)}</span>
                </div>
                <div className="flex items-end space-x-2">
                  <span className="text-2xl font-bold text-gray-900">
                    {metric.value}
                  </span>
                  <span className="text-sm text-gray-600 mb-1">
                    {metric.unit}
                  </span>
                </div>
                <div
                  className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${getMetricColor(metric.status)}`}
                >
                  {metric.status === "normal"
                    ? "тЬЕ"
                    : metric.status === "warning"
                      ? "тЪая╕П"
                      : "ЁЯЪи"}{" "}
                  {metric.status}
                </div>

                {/* Mini chart */}
                <div className="mt-4 h-16 bg-gray-50 rounded-lg p-2">
                  <div className="flex items-end justify-between h-full">
                    {metric.history.slice(-7).map((point, index) => (
                      <div
                        key={index}
                        className="bg-blue-500 rounded-t w-2"
                        style={{
                          height: `${(point.value / Math.max(...metric.history.map((h) => h.value))) * 100}%`,
                          minHeight: "4px",
                        }}
                      />
                    ))}
                  </div>
                </div>
              </div>
            ))}
          </div>

          {/* Recent Insights */}
          <div className="bg-white rounded-xl shadow-lg p-6">
            <h2 className="text-xl font-semibold mb-4">
              ЁЯФо {getLocalText('recentAIInsights')}
            </h2>
            <div className="space-y-3">
              {insights.slice(0, 3).map((insight) => (
                <div
                  key={insight.id}
                  className={`p-4 rounded-lg border-l-4 ${
                    insight.priority === "high"
                      ? "border-red-500 bg-red-50"
                      : insight.priority === "medium"
                        ? "border-yellow-500 bg-yellow-50"
                        : "border-green-500 bg-green-50"
                  }`}
                >
                  <div className="flex items-start space-x-3">
                    <span className="text-lg">
                      {getInsightIcon(insight.type)}
                    </span>
                    <div className="flex-1">
                      <h3 className="font-medium text-gray-900">
                        {insight.title}
                      </h3>
                      <p className="text-sm text-gray-600 mt-1">
                        {insight.description}
                      </p>
                      {insight.action && (
                        <button className="mt-2 text-sm font-medium text-blue-600 hover:text-blue-800">
                          {insight.action} тЖТ
                        </button>
                      )}
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
      )}

      {/* Metrics Tab */}
      {activeTab === "metrics" && (
        <div className="space-y-6">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            {healthMetrics.map((metric) => (
              <div
                key={metric.id}
                className="bg-white rounded-xl shadow-lg p-6"
              >
                <div className="flex items-center justify-between mb-4">
                  <h3 className="text-lg font-semibold">{metric.name}</h3>
                  <div
                    className={`px-3 py-1 rounded-full text-sm font-medium ${getMetricColor(metric.status)}`}
                  >
                    {metric.status}
                  </div>
                </div>

                <div className="flex items-center space-x-4 mb-4">
                  <div className="text-3xl font-bold text-gray-900">
                    {metric.value}
                  </div>
                  <div className="text-gray-600">{metric.unit}</div>
                  <div className="flex items-center space-x-1">
                    <span>{getTrendIcon(metric.trend)}</span>
                    <span className="text-sm text-gray-600">
                      {metric.trend === "up"
                        ? getLocalText('increasing')
                        : metric.trend === "down"
                          ? getLocalText('decreasing')
                          : getLocalText('stable')}
                    </span>
                  </div>
                </div>

                {/* Target Range */}
                <div className="mb-4">
                  <div className="flex justify-between text-sm text-gray-600 mb-1">
                    <span>{getLocalText('targetRange')}</span>
                    <span>
                      {metric.target.min} - {metric.target.max} {metric.unit}
                    </span>
                  </div>
                  <div className="w-full bg-gray-200 rounded-full h-2">
                    <div
                      className={`h-2 rounded-full ${
                        metric.value >= metric.target.min &&
                        metric.value <= metric.target.max
                          ? "bg-green-500"
                          : "bg-red-500"
                      }`}
                      style={{
                        width: `${Math.min((metric.value / metric.target.max) * 100, 100)}%`,
                      }}
                    />
                  </div>
                </div>

                {/* History Chart */}
                <div className="h-32 bg-gray-50 rounded-lg p-3">
                  <div className="flex items-end justify-between h-full space-x-1">
                    {metric.history.map((point, index) => (
                      <div
                        key={index}
                        className="flex flex-col items-center flex-1"
                      >
                        <div
                          className="bg-blue-500 rounded-t w-full"
                          style={{
                            height: `${(point.value / Math.max(...metric.history.map((h) => h.value))) * 100}%`,
                            minHeight: "4px",
                          }}
                        />
                        <span className="text-xs text-gray-500 mt-1">
                          {new Date(point.date).getDate()}
                        </span>
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* Goals Tab */}
      {activeTab === "goals" && (
        <div className="space-y-6">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {healthGoals.map((goal) => (
              <div key={goal.id} className="bg-white rounded-xl shadow-lg p-6">
                <div className="flex items-center justify-between mb-4">
                  <div className="flex items-center space-x-2">
                    <span className="text-2xl">
                      {getCategoryIcon(goal.category)}
                    </span>
                    <h3 className="font-semibold text-lg">{goal.title}</h3>
                  </div>
                  <span className="text-sm text-gray-500">
                    Due: {new Date(goal.deadline).toLocaleDateString()}
                  </span>
                </div>

                <div className="space-y-3">
                  <div className="flex justify-between items-center">
                    <span className="text-gray-600">{getLocalText('progress')}</span>
                    <span className="font-semibold">
                      {goal.current} / {goal.target} {goal.unit}
                    </span>
                  </div>

                  <div className="w-full bg-gray-200 rounded-full h-3">
                    <div
                      className="bg-gradient-to-r from-blue-500 to-purple-600 h-3 rounded-full transition-all duration-500"
                      style={{
                        width: `${Math.min((goal.current / goal.target) * 100, 100)}%`,
                      }}
                    />
                  </div>

                  <div className="flex justify-between text-sm">
                    <span className="text-gray-600">
                      {Math.round((goal.current / goal.target) * 100)}% {getLocalText('complete')}
                    </span>
                    <span className="text-gray-600">
                      {goal.target - goal.current > 0
                        ? `${Math.round((goal.target - goal.current) * 10) / 10} ${goal.unit} ${getLocalText('toGo')}`
                        : getLocalText('goalAchieved')}
                    </span>
                  </div>
                </div>

                <button className="mt-4 w-full py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors">
                  {getLocalText('updateProgress')}
                </button>
              </div>
            ))}
          </div>

          {/* Add New Goal */}
          <div className="bg-gradient-to-r from-green-50 to-blue-50 rounded-xl p-6 border-2 border-dashed border-green-300">
            <div className="text-center">
              <span className="text-4xl mb-4 block">ЁЯОп</span>
              <h3 className="text-lg font-semibold text-gray-800 mb-2">
                {getLocalText('setNewHealthGoal')}
              </h3>
              <p className="text-gray-600 mb-4">
                {getLocalText('trackProgressBetterHealth')}
              </p>
              <button className="px-6 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors">
                {getLocalText('addNewGoal')}
              </button>
            </div>
          </div>
        </div>
      )}

      {/* AI Insights Tab */}
      {activeTab === "insights" && (
        <div className="space-y-6">
          <div className="bg-white rounded-xl shadow-lg p-6">
            <h2 className="text-xl font-semibold mb-4">
              ЁЯза {getLocalText('aiPoweredHealthInsights')}
            </h2>
            <div className="space-y-4">
              {insights.map((insight) => (
                <div
                  key={insight.id}
                  className={`p-6 rounded-xl border-l-4 ${
                    insight.priority === "high"
                      ? "border-red-500 bg-red-50"
                      : insight.priority === "medium"
                        ? "border-yellow-500 bg-yellow-50"
                        : "border-green-500 bg-green-50"
                  }`}
                >
                  <div className="flex items-start space-x-4">
                    <span className="text-2xl">
                      {getInsightIcon(insight.type)}
                    </span>
                    <div className="flex-1">
                      <div className="flex items-center justify-between mb-2">
                        <h3 className="font-semibold text-lg text-gray-900">
                          {insight.title}
                        </h3>
                        <span
                          className={`px-2 py-1 rounded-full text-xs font-medium ${
                            insight.priority === "high"
                              ? "bg-red-200 text-red-800"
                              : insight.priority === "medium"
                                ? "bg-yellow-200 text-yellow-800"
                                : "bg-green-200 text-green-800"
                          }`}
                        >
                          {getLocalText(`${insight.priority}Priority` as keyof typeof texts.english)}
                        </span>
                      </div>
                      <p className="text-gray-700 mb-3">
                        {insight.description}
                      </p>
                      {insight.action && (
                        <button className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors text-sm font-medium">
                          {insight.action}
                        </button>
                      )}
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>

          {/* Health Score */}
          <div className="bg-gradient-to-r from-purple-600 to-blue-600 rounded-xl p-6 text-white">
            <h2 className="text-xl font-semibold mb-4">
              ЁЯПЖ {getLocalText('overallHealthScore')}
            </h2>
            <div className="flex items-center justify-between">
              <div>
                <div className="text-4xl font-bold mb-2">78/100</div>
                <p className="text-purple-100">
                  {getLocalText('goodKeepUp')}
                </p>
              </div>
              <div className="w-32 h-32 relative">
                <svg
                  className="w-full h-full transform -rotate-90"
                  viewBox="0 0 100 100"
                >
                  <circle
                    cx="50"
                    cy="50"
                    r="40"
                    stroke="rgba(255,255,255,0.3)"
                    strokeWidth="8"
                    fill="none"
                  />
                  <circle
                    cx="50"
                    cy="50"
                    r="40"
                    stroke="white"
                    strokeWidth="8"
                    fill="none"
                    strokeDasharray="251.2"
                    strokeDashoffset="62.8"
                    className="transition-all duration-1000"
                  />
                </svg>
                <div className="absolute inset-0 flex items-center justify-center">
                  <span className="text-2xl font-bold">78%</span>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
