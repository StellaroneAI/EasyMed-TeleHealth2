import { useState, useEffect } from "react";
import { useLanguage } from "../contexts/LanguageContext";
import { useABHA } from "../contexts/ABHAContext";
import { abhaService, TelemedicineSession } from "../services/abhaService";

export default function TelemedicineConsultation() {
  const { currentLanguage } = useLanguage();
  const { abhaProfile, isABHAConnected } = useABHA();
  const [sessions, setSessions] = useState<TelemedicineSession[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [showBooking, setShowBooking] = useState(false);
  const [selectedDoctor, setSelectedDoctor] = useState("");
  const [appointmentDate, setAppointmentDate] = useState("");
  const [appointmentTime, setAppointmentTime] = useState("");
  const [consultationType, setConsultationType] = useState<
    "general" | "specialist"
  >("general");
  const [symptoms, setSymptoms] = useState("");

  // Telemedicine translations
  const teleTexts = {
    english: {
      title: "ЁЯУ║ Telemedicine Consultations",
      subtitle: "Video consultations with certified doctors",
      bookConsultation: "Book Consultation",
      upcomingSessions: "Upcoming Sessions",
      pastSessions: "Past Consultations",
      noSessions: "No consultations scheduled",
      doctorName: "Doctor Name",
      consultationType: "Consultation Type",
      date: "Date",
      time: "Time",
      status: "Status",
      symptoms: "Symptoms/Chief Complaint",
      general: "General Consultation",
      specialist: "Specialist Consultation",
      scheduled: "Scheduled",
      inProgress: "In Progress",
      completed: "Completed",
      cancelled: "Cancelled",
      joinSession: "Join Video Call",
      reschedule: "Reschedule",
      cancel: "Cancel",
      save: "Book Appointment",
      close: "Close",
      selectDate: "Select Date",
      selectTime: "Select Time",
      selectDoctor: "Select Doctor",
      enterSymptoms: "Describe your symptoms or reason for consultation",
      sessionId: "Session ID",
      duration: "Duration",
      prescription: "View Prescription",
      followUp: "Schedule Follow-up",
      rating: "Rate Consultation",
      today: "Today",
      tomorrow: "Tomorrow",
      thisWeek: "This Week",
    },
    hindi: {
      title: "ЁЯУ║ рдЯреЗрд▓реАрдореЗрдбрд┐рд╕рд┐рди рдкрд░рд╛рдорд░реНрд╢",
      subtitle: "рдкреНрд░рдорд╛рдгрд┐рдд рдбреЙрдХреНрдЯрд░реЛрдВ рдХреЗ рд╕рд╛рде рд╡реАрдбрд┐рдпреЛ рдкрд░рд╛рдорд░реНрд╢",
      bookConsultation: "рдкрд░рд╛рдорд░реНрд╢ рдмреБрдХ рдХрд░реЗрдВ",
      upcomingSessions: "рдЖрдЧрд╛рдореА рд╕рддреНрд░",
      pastSessions: "рдкрд┐рдЫрд▓реЗ рдкрд░рд╛рдорд░реНрд╢",
      noSessions: "рдХреЛрдИ рдкрд░рд╛рдорд░реНрд╢ рдирд┐рд░реНрдзрд╛рд░рд┐рдд рдирд╣реАрдВ",
      doctorName: "рдбреЙрдХреНрдЯрд░ рдХрд╛ рдирд╛рдо",
      consultationType: "рдкрд░рд╛рдорд░реНрд╢ рдкреНрд░рдХрд╛рд░",
      date: "рддрд╛рд░реАрдЦ",
      time: "рд╕рдордп",
      status: "рд╕реНрдерд┐рддрд┐",
      symptoms: "рд▓рдХреНрд╖рдг/рдореБрдЦреНрдп рд╢рд┐рдХрд╛рдпрдд",
      general: "рд╕рд╛рдорд╛рдиреНрдп рдкрд░рд╛рдорд░реНрд╢",
      specialist: "рд╡рд┐рд╢реЗрд╖рдЬреНрдЮ рдкрд░рд╛рдорд░реНрд╢",
      scheduled: "рдирд┐рд░реНрдзрд╛рд░рд┐рдд",
      inProgress: "рдЪрд▓ рд░рд╣рд╛ рд╣реИ",
      completed: "рдкреВрд░реНрдг",
      cancelled: "рд░рджреНрдж",
      joinSession: "рд╡реАрдбрд┐рдпреЛ рдХреЙрд▓ рдореЗрдВ рд╢рд╛рдорд┐рд▓ рд╣реЛрдВ",
      reschedule: "рдкреБрдирд░реНрдирд┐рд░реНрдзрд╛рд░рдг",
      cancel: "рд░рджреНрдж рдХрд░реЗрдВ",
      save: "рдЕрдкреЙрдЗрдВрдЯрдореЗрдВрдЯ рдмреБрдХ рдХрд░реЗрдВ",
      close: "рдмрдВрдж рдХрд░реЗрдВ",
      selectDate: "рддрд╛рд░реАрдЦ рдЪреБрдиреЗрдВ",
      selectTime: "рд╕рдордп рдЪреБрдиреЗрдВ",
      selectDoctor: "рдбреЙрдХреНрдЯрд░ рдЪреБрдиреЗрдВ",
      enterSymptoms: "рдЕрдкрдиреЗ рд▓рдХреНрд╖рдг рдпрд╛ рдкрд░рд╛рдорд░реНрд╢ рдХрд╛ рдХрд╛рд░рдг рдмрддрд╛рдПрдВ",
      sessionId: "рд╕рддреНрд░ рдЖрдИрдбреА",
      duration: "рдЕрд╡рдзрд┐",
      prescription: "рдкреНрд░рд┐рд╕реНрдХреНрд░рд┐рдкреНрд╢рди рджреЗрдЦреЗрдВ",
      followUp: "рдлреЙрд▓реЛ-рдЕрдк рд╢реЗрдбреНрдпреВрд▓ рдХрд░реЗрдВ",
      rating: "рдкрд░рд╛рдорд░реНрд╢ рд░реЗрдЯрд┐рдВрдЧ рджреЗрдВ",
      today: "рдЖрдЬ",
      tomorrow: "рдХрд▓",
      thisWeek: "рдЗрд╕ рд╕рдкреНрддрд╛рд╣",
    },
    tamil: {
      title: "ЁЯУ║ роЯрпЖро▓ро┐роорпЖроЯро┐роЪро┐ройрпН роЖро▓рпЛроЪройрпИроХро│рпН",
      subtitle: "роЪро╛ройрпНро▒ро│ро┐роХрпНроХрокрпНрокроЯрпНроЯ рооро░рпБродрпНродрпБро╡ро░рпНроХро│рпБроЯройрпН ро╡рпАроЯро┐ропрпЛ роЖро▓рпЛроЪройрпИроХро│рпН",
      bookConsultation: "роЖро▓рпЛроЪройрпИ рокрпБроХрпН роЪрпЖропрпНропро╡рпБроорпН",
      upcomingSessions: "ро╡ро░ро╡ро┐ро░рпБроХрпНроХрпБроорпН роЕрооро░рпНро╡рпБроХро│рпН",
      pastSessions: "роорпБроирпНродрпИроп роЖро▓рпЛроЪройрпИроХро│рпН",
      noSessions: "роОроирпНрод роЖро▓рпЛроЪройрпИропрпБроорпН родро┐роЯрпНроЯрооро┐роЯрокрпНрокроЯро╡ро┐ро▓рпНро▓рпИ",
      doctorName: "рооро░рпБродрпНродрпБро╡ро░рпН рокрпЖропро░рпН",
      consultationType: "роЖро▓рпЛроЪройрпИ ро╡роХрпИ",
      date: "родрпЗродро┐",
      time: "роирпЗро░роорпН",
      status: "роиро┐ро▓рпИ",
      symptoms: "роЕро▒ро┐роХрпБро▒ро┐роХро│рпН/роорпБроХрпНроХро┐роп рокрпБроХро╛ро░рпН",
      general: "рокрпКродрпБ роЖро▓рпЛроЪройрпИ",
      specialist: "роиро┐рокрпБрогро░рпН роЖро▓рпЛроЪройрпИ",
      scheduled: "родро┐роЯрпНроЯрооро┐роЯрокрпНрокроЯрпНроЯродрпБ",
      inProgress: "роироЯроирпНродрпБ роХрпКрогрпНроЯро┐ро░рпБроХрпНроХро┐ро▒родрпБ",
      completed: "роиро┐ро▒рпИро╡рпБро▒рпНро▒родрпБ",
      cancelled: "ро░родрпНродрпБ роЪрпЖропрпНропрокрпНрокроЯрпНроЯродрпБ",
      joinSession: "ро╡рпАроЯро┐ропрпЛ роХро╛ро▓рпН роЪрпЗро░ро╡рпБроорпН",
      reschedule: "рооро▒рпБродро┐роЯрпНроЯрооро┐роЯро▓рпН",
      cancel: "ро░родрпНродрпБ роЪрпЖропрпН",
      save: "роЕрокрпНрокро╛ропро┐ройрпНроЯрпНроорпЖройрпНроЯрпН рокрпБроХрпН роЪрпЖропрпН",
      close: "роорпВроЯрпБ",
      selectDate: "родрпЗродро┐ропрпИродрпН родрпЗро░рпНроирпНродрпЖроЯрпБроХрпНроХро╡рпБроорпН",
      selectTime: "роирпЗро░родрпНродрпИродрпН родрпЗро░рпНроирпНродрпЖроЯрпБроХрпНроХро╡рпБроорпН",
      selectDoctor: "рооро░рпБродрпНродрпБро╡ро░рпИродрпН родрпЗро░рпНроирпНродрпЖроЯрпБроХрпНроХро╡рпБроорпН",
      enterSymptoms: "роЙроЩрпНроХро│рпН роЕро▒ро┐роХрпБро▒ро┐роХро│рпН роЕро▓рпНро▓родрпБ роЖро▓рпЛроЪройрпИроХрпНроХро╛рой роХро╛ро░рогродрпНродрпИ ро╡ро┐ро╡ро░ро┐роХрпНроХро╡рпБроорпН",
      sessionId: "роЕрооро░рпНро╡рпБ ID",
      duration: "роХро╛ро▓роорпН",
      prescription: "рооро░рпБроирпНродрпБроЪрпН роЪрпАроЯрпНроЯрпИрокрпН рокро╛ро░рпНроХрпНроХро╡рпБроорпН",
      followUp: "рокро┐ройрпНродрпКроЯро░рпНродро▓рпИродрпН родро┐роЯрпНроЯрооро┐роЯро╡рпБроорпН",
      rating: "роЖро▓рпЛроЪройрпИропрпИ роородро┐рокрпНрокро┐роЯро╡рпБроорпН",
      today: "роЗройрпНро▒рпБ",
      tomorrow: "роиро╛ро│рпИ",
      thisWeek: "роЗроирпНрод ро╡ро╛ро░роорпН",
    },
    telugu: {
      title: "ЁЯУ║ р░Яр▒Жр░▓р░┐р░ор▒Жр░бр░┐р░╕р░┐р░ир▒Н р░Хр░ир▒Нр░╕р░▓р▒Нр░Яр▒Зр░╖р░ир▒Нр░▓р▒Б",
      subtitle: "р░╕р░░р▒Нр░Яр░┐р░лр▒Ир░бр▒Н р░бр░╛р░Хр▒Нр░Яр░░р▒Нр░▓р░др▒Л р░╡р▒Ар░бр░┐р░пр▒Л р░Хр░ир▒Нр░╕р░▓р▒Нр░Яр▒Зр░╖р░ир▒Нр░▓р▒Б",
      bookConsultation: "р░Хр░ир▒Нр░╕р░▓р▒Нр░Яр▒Зр░╖р░ир▒Н р░мр▒Бр░Хр▒Н р░Ър▒Зр░пр░Вр░бр░┐",
      upcomingSessions: "р░░р░╛р░мр▒Лр░пр▒З р░╕р▒Жр░╖р░ир▒Нр░▓р▒Б",
      pastSessions: "р░Чр░д р░Хр░ир▒Нр░╕р░▓р▒Нр░Яр▒Зр░╖р░ир▒Нр░▓р▒Б",
      noSessions: "р░Ор░▓р░╛р░Вр░Яр░┐ р░Хр░ир▒Нр░╕р░▓р▒Нр░Яр▒Зр░╖р░ир▒Нр░▓р▒Б р░╖р▒Жр░бр▒Нр░пр▒Вр░▓р▒Н р░Ър▒Зр░пр░мр░бр░▓р▒Зр░жр▒Б",
      doctorName: "р░бр░╛р░Хр▒Нр░Яр░░р▒Н р░кр▒Зр░░р▒Б",
      consultationType: "р░Хр░ир▒Нр░╕р░▓р▒Нр░Яр▒Зр░╖р░ир▒Н р░░р░Хр░В",
      date: "р░др▒Зр░жр▒А",
      time: "р░╕р░ор░пр░В",
      status: "р░╕р▒Нр░ер░┐р░др░┐",
      symptoms: "р░▓р░Хр▒Нр░╖р░гр░╛р░▓р▒Б/р░кр▒Нр░░р░зр░╛р░и р░лр░┐р░░р▒Нр░пр░╛р░жр▒Б",
      general: "р░Ьр░ир░░р░▓р▒Н р░Хр░ир▒Нр░╕р░▓р▒Нр░Яр▒Зр░╖р░ир▒Н",
      specialist: "р░╕р▒Нр░кр▒Жр░╖р░▓р░┐р░╕р▒Нр░Яр▒Н р░Хр░ир▒Нр░╕р░▓р▒Нр░Яр▒Зр░╖р░ир▒Н",
      scheduled: "р░╖р▒Жр░бр▒Нр░пр▒Вр░▓р▒Н р░Ър▒Зр░пр░мр░бр░┐р░Вр░жр░┐",
      inProgress: "р░Ьр░░р▒Бр░Чр▒Бр░др▒Лр░Вр░жр░┐",
      completed: "р░кр▒Вр░░р▒Нр░др░пр░┐р░Вр░жр░┐",
      cancelled: "р░░р░жр▒Нр░жр▒Б р░Ър▒Зр░пр░мр░бр░┐р░Вр░жр░┐",
      joinSession: "р░╡р▒Ар░бр░┐р░пр▒Л р░Хр░╛р░▓р▒Нр░▓р▒Л р░Ър▒Зр░░р░Вр░бр░┐",
      reschedule: "р░░р▒Ар░╖р▒Жр░бр▒Нр░пр▒Вр░▓р▒Н р░Ър▒Зр░пр░Вр░бр░┐",
      cancel: "р░░р░жр▒Нр░жр▒Б р░Ър▒Зр░пр░Вр░бр░┐",
      save: "р░Ер░кр░╛р░пр░┐р░Вр░Яр▒Нр░ор▒Жр░Вр░Яр▒Н р░мр▒Бр░Хр▒Н р░Ър▒Зр░пр░Вр░бр░┐",
      close: "р░ор▒Вр░╕р░┐р░╡р▒Зр░пр░Вр░бр░┐",
      selectDate: "р░др▒Зр░жр▒Ар░ир░┐ р░Ор░Вр░Ър▒Бр░Хр▒Лр░Вр░бр░┐",
      selectTime: "р░╕р░ор░пр░╛р░ир▒Нр░ир░┐ р░Ор░Вр░Ър▒Бр░Хр▒Лр░Вр░бр░┐",
      selectDoctor: "р░бр░╛р░Хр▒Нр░Яр░░р▒Нр░ир░┐ р░Ор░Вр░Ър▒Бр░Хр▒Лр░Вр░бр░┐",
      enterSymptoms: "р░ор▒А р░▓р░Хр▒Нр░╖р░гр░╛р░▓р░ир▒Б р░▓р▒Зр░жр░╛ р░Хр░ир▒Нр░╕р░▓р▒Нр░Яр▒Зр░╖р░ир▒Н р░Хр░╛р░░р░гр░╛р░ир▒Нр░ир░┐ р░╡р░┐р░╡р░░р░┐р░Вр░Ър░Вр░бр░┐",
      sessionId: "р░╕р▒Жр░╖р░ир▒Н ID",
      duration: "р░╡р▒Нр░пр░╡р░зр░┐",
      prescription: "р░кр▒Нр░░р░┐р░╕р▒Нр░Хр▒Нр░░р░┐р░кр▒Нр░╖р░ир▒Н р░Ър▒Вр░бр░Вр░бр░┐",
      followUp: "р░лр░╛р░▓р▒Л-р░Ер░кр▒Н р░╖р▒Жр░бр▒Нр░пр▒Вр░▓р▒Н р░Ър▒Зр░пр░Вр░бр░┐",
      rating: "р░Хр░ир▒Нр░╕р░▓р▒Нр░Яр▒Зр░╖р░ир▒Н р░░р▒Зр░Яр░┐р░Вр░Чр▒Н р░Зр░╡р▒Нр░╡р░Вр░бр░┐",
      today: "р░Ир░░р▒Лр░Ьр▒Б",
      tomorrow: "р░░р▒Зр░кр▒Б",
      thisWeek: "р░И р░╡р░╛р░░р░В",
    },
    bengali: {
      title: "ЁЯУ║ ржЯрзЗрж▓рж┐ржорзЗржбрж┐рж╕рж┐ржи ржкрж░рж╛ржорж░рзНрж╢",
      subtitle: "ржкрзНрж░рждрзНржпржпрж╝рж┐ржд ржбрж╛ржХрзНрждрж╛рж░ржжрзЗрж░ рж╕рж╛ржерзЗ ржнрж┐ржбрж┐ржУ ржкрж░рж╛ржорж░рзНрж╢",
      bookConsultation: "ржкрж░рж╛ржорж░рзНрж╢ ржмрзБржХ ржХрж░рзБржи",
      upcomingSessions: "ржЖрж╕ржирзНржи рж╕рзЗрж╢ржи",
      pastSessions: "ржЕрждрзАрждрзЗрж░ ржкрж░рж╛ржорж░рзНрж╢",
      noSessions: "ржХрзЛржи ржкрж░рж╛ржорж░рзНрж╢ ржирж┐рж░рзНржзрж╛рж░рж┐ржд ржирзЗржЗ",
      doctorName: "ржбрж╛ржХрзНрждрж╛рж░рзЗрж░ ржирж╛ржо",
      consultationType: "ржкрж░рж╛ржорж░рзНрж╢рзЗрж░ ржзрж░ржи",
      date: "рждрж╛рж░рж┐ржЦ",
      time: "рж╕ржоржпрж╝",
      status: "ржЕржмрж╕рзНржерж╛",
      symptoms: "рж▓ржХрзНрж╖ржг/ржкрзНрж░ржзрж╛ржи ржЕржнрж┐ржпрзЛржЧ",
      general: "рж╕рж╛ржзрж╛рж░ржг ржкрж░рж╛ржорж░рзНрж╢",
      specialist: "ржмрж┐рж╢рзЗрж╖ржЬрзНржЮ ржкрж░рж╛ржорж░рзНрж╢",
      scheduled: "ржирж┐рж░рзНржзрж╛рж░рж┐ржд",
      inProgress: "ржЪрж▓ржорж╛ржи",
      completed: "рж╕ржорзНржкрзВрж░рзНржг",
      cancelled: "ржмрж╛рждрж┐рж▓",
      joinSession: "ржнрж┐ржбрж┐ржУ ржХрж▓рзЗ ржпрзЛржЧ ржжрж┐ржи",
      reschedule: "ржкрзБржирж░рзНржирж┐рж░рзНржзрж╛рж░ржг",
      cancel: "ржмрж╛рждрж┐рж▓ ржХрж░рзБржи",
      save: "ржЕрзНржпрж╛ржкржпрж╝рзЗржирзНржЯржорзЗржирзНржЯ ржмрзБржХ ржХрж░рзБржи",
      close: "ржмржирзНржз ржХрж░рзБржи",
      selectDate: "рждрж╛рж░рж┐ржЦ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи",
      selectTime: "рж╕ржоржпрж╝ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи",
      selectDoctor: "ржбрж╛ржХрзНрждрж╛рж░ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи",
      enterSymptoms: "ржЖржкржирж╛рж░ рж▓ржХрзНрж╖ржг ржмрж╛ ржкрж░рж╛ржорж░рзНрж╢рзЗрж░ ржХрж╛рж░ржг ржмрж░рзНржгржирж╛ ржХрж░рзБржи",
      sessionId: "рж╕рзЗрж╢ржи ID",
      duration: "рж╕ржоржпрж╝ржХрж╛рж▓",
      prescription: "ржкрзНрж░рзЗрж╕ржХрзНрж░рж┐ржкрж╢ржи ржжрзЗржЦрзБржи",
      followUp: "ржлрж▓рзЛ-ржЖржк ржирж┐рж░рзНржзрж╛рж░ржг ржХрж░рзБржи",
      rating: "ржкрж░рж╛ржорж░рзНрж╢рзЗрж░ рж░рзЗржЯрж┐ржВ ржжрж┐ржи",
      today: "ржЖржЬ",
      tomorrow: "ржЖржЧрж╛ржорзАржХрж╛рж▓",
      thisWeek: "ржПржЗ рж╕ржкрзНрждрж╛рж╣рзЗ",
    },
  };

  const getTeleText = (key: keyof typeof teleTexts.english): string => {
    return (
      teleTexts[currentLanguage as keyof typeof teleTexts]?.[key] ||
      teleTexts.english[key]
    );
  };

  // Mock doctors data
  const availableDoctors = [
    {
      id: "dr1",
      name: "Dr. Rajesh Sharma",
      specialization: "General Medicine",
      rating: 4.8,
    },
    {
      id: "dr2",
      name: "Dr. Priya Patel",
      specialization: "Cardiology",
      rating: 4.9,
    },
    {
      id: "dr3",
      name: "Dr. Arjun Singh",
      specialization: "Pediatrics",
      rating: 4.7,
    },
    {
      id: "dr4",
      name: "Dr. Kavya Reddy",
      specialization: "Dermatology",
      rating: 4.8,
    },
    {
      id: "dr5",
      name: "Dr. Vikram Kumar",
      specialization: "Orthopedics",
      rating: 4.6,
    },
  ];

  // Generate time slots
  const generateTimeSlots = () => {
    const slots = [];
    for (let hour = 9; hour <= 18; hour++) {
      for (let minute = 0; minute < 60; minute += 30) {
        const time = `${hour.toString().padStart(2, "0")}:${minute.toString().padStart(2, "0")}`;
        slots.push(time);
      }
    }
    return slots;
  };

  useEffect(() => {
    if (isABHAConnected && abhaProfile) {
      loadTelemedicineSessions();
    }
  }, [isABHAConnected, abhaProfile]);

  const loadTelemedicineSessions = async () => {
    if (!abhaProfile) return;

    setIsLoading(true);
    try {
      const tokens = localStorage.getItem("abha_tokens");
      if (tokens) {
        const { accessToken } = JSON.parse(tokens);
        const sessionsData = await abhaService.getTelemedicineSessions(
          abhaProfile.healthId,
          accessToken,
        );
        setSessions(sessionsData);
      }
    } catch (error) {
      console.error("Failed to load telemedicine sessions:", error);
    } finally {
      setIsLoading(false);
    }
  };

  const handleBookConsultation = async () => {
    if (!abhaProfile || !selectedDoctor || !appointmentDate || !appointmentTime)
      return;

    setIsLoading(true);
    try {
      const tokens = localStorage.getItem("abha_tokens");
      if (tokens) {
        const { accessToken } = JSON.parse(tokens);

        const session = await abhaService.scheduleTelemedicine(
          abhaProfile.healthId,
          selectedDoctor,
          "VIDEO",
          new Date(`${appointmentDate}T${appointmentTime}`).toISOString(),
          accessToken,
        );

        if (session) {
          await loadTelemedicineSessions();
          setShowBooking(false);
          resetBookingForm();
        }
      }
    } catch (error) {
      console.error("Failed to book consultation:", error);
    } finally {
      setIsLoading(false);
    }
  };

  const resetBookingForm = () => {
    setSelectedDoctor("");
    setAppointmentDate("");
    setAppointmentTime("");
    setConsultationType("general");
    setSymptoms("");
  };

  const handleJoinSession = async (sessionId: string) => {
    if (!abhaProfile) return;

    try {
      const tokens = localStorage.getItem("abha_tokens");
      if (tokens) {
        const { accessToken } = JSON.parse(tokens);
        const sessionData = await abhaService.joinTelemedicineSession(
          sessionId,
          accessToken,
        );

        if (sessionData && sessionData.meetingUrl) {
          window.open(sessionData.meetingUrl, "_blank");
        }
      }
    } catch (error) {
      console.error("Failed to join session:", error);
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case "SCHEDULED":
        return "bg-blue-100 text-blue-800";
      case "IN_PROGRESS":
        return "bg-green-100 text-green-800";
      case "COMPLETED":
        return "bg-gray-100 text-gray-800";
      case "CANCELLED":
        return "bg-red-100 text-red-800";
      default:
        return "bg-gray-100 text-gray-800";
    }
  };

  const formatDate = (dateString: string) => {
    const date = new Date(dateString);
    const today = new Date();
    const tomorrow = new Date(today);
    tomorrow.setDate(tomorrow.getDate() + 1);

    if (date.toDateString() === today.toDateString()) {
      return getTeleText("today");
    } else if (date.toDateString() === tomorrow.toDateString()) {
      return getTeleText("tomorrow");
    } else {
      return date.toLocaleDateString();
    }
  };

  if (!isABHAConnected) {
    return (
      <div className="bg-white/70 backdrop-blur-sm p-4 sm:p-6 rounded-xl border border-white/20">
        <div className="text-center py-8">
          <div className="text-4xl mb-4">ЁЯУ║</div>
          <h3 className="text-lg font-semibold mb-2">{getTeleText("title")}</h3>
          <p className="text-gray-600 mb-4">
            Connect ABHA to access telemedicine services
          </p>
        </div>
      </div>
    );
  }

  return (
    <div className="bg-white/70 backdrop-blur-sm p-4 sm:p-6 rounded-xl border border-white/20">
      <div className="flex items-center justify-between mb-4">
        <div>
          <h3 className="text-base sm:text-lg font-semibold">
            {getTeleText("title")}
          </h3>
          <p className="text-sm text-gray-600">{getTeleText("subtitle")}</p>
        </div>
        <button
          onClick={() => setShowBooking(true)}
          className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-all text-sm"
        >
          {getTeleText("bookConsultation")}
        </button>
      </div>

      {/* Sessions List */}
      {isLoading ? (
        <div className="text-center py-8">
          <div className="animate-spin w-8 h-8 border-4 border-blue-600 border-t-transparent rounded-full mx-auto mb-4"></div>
          <p className="text-gray-600">Loading consultations...</p>
        </div>
      ) : (
        <div className="space-y-4">
          {/* Upcoming Sessions */}
          <div>
            <h4 className="font-medium mb-3">
              {getTeleText("upcomingSessions")}
            </h4>
            {sessions.filter(
              (s) => s.status === "SCHEDULED" || s.status === "ACTIVE",
            ).length === 0 ? (
              <div className="text-center py-6 bg-white/30 rounded-lg">
                <div className="text-2xl mb-2">ЁЯУЕ</div>
                <p className="text-gray-600 text-sm">
                  {getTeleText("noSessions")}
                </p>
              </div>
            ) : (
              <div className="space-y-3">
                {sessions
                  .filter(
                    (s) => s.status === "SCHEDULED" || s.status === "ACTIVE",
                  )
                  .map((session) => (
                    <div
                      key={session.sessionId}
                      className="bg-white/50 p-4 rounded-lg border border-white/20"
                    >
                      <div className="flex items-center justify-between">
                        <div className="flex-1 min-w-0">
                          <div className="flex items-center space-x-3 mb-2">
                            <div className="w-10 h-10 bg-gradient-to-br from-blue-100 to-green-100 rounded-full flex items-center justify-center">
                              ЁЯСитАНтЪХя╕П
                            </div>
                            <div className="min-w-0 flex-1">
                              <h5 className="font-medium truncate">
                                {session.doctorName}
                              </h5>
                              <p className="text-xs text-gray-600">
                                {session.specialty}
                              </p>
                            </div>
                          </div>
                          <div className="grid grid-cols-2 gap-2 text-xs">
                            <div>
                              <span className="text-gray-500">
                                {getTeleText("date")}:{" "}
                              </span>
                              <span className="font-medium">
                                {formatDate(session.scheduledTime)}
                              </span>
                            </div>
                            <div>
                              <span className="text-gray-500">
                                {getTeleText("time")}:{" "}
                              </span>
                              <span className="font-medium">
                                {new Date(
                                  session.scheduledTime,
                                ).toLocaleTimeString([], {
                                  hour: "2-digit",
                                  minute: "2-digit",
                                })}
                              </span>
                            </div>
                          </div>
                          <div className="mt-2">
                            <span
                              className={`inline-flex items-center px-2 py-1 rounded-full text-xs ${getStatusColor(session.status)}`}
                            >
                              {getTeleText(
                                session.status.toLowerCase() as keyof typeof teleTexts.english,
                              )}
                            </span>
                          </div>
                        </div>
                        <div className="flex flex-col space-y-2 ml-4">
                          {session.status === "ACTIVE" && (
                            <button
                              onClick={() =>
                                handleJoinSession(session.sessionId)
                              }
                              className="bg-green-600 text-white px-3 py-1 rounded text-xs hover:bg-green-700 transition-all"
                            >
                              {getTeleText("joinSession")}
                            </button>
                          )}
                          {session.status === "SCHEDULED" && (
                            <>
                              <button
                                onClick={() =>
                                  handleJoinSession(session.sessionId)
                                }
                                className="bg-blue-600 text-white px-3 py-1 rounded text-xs hover:bg-blue-700 transition-all"
                              >
                                {getTeleText("joinSession")}
                              </button>
                              <button className="bg-orange-600 text-white px-3 py-1 rounded text-xs hover:bg-orange-700 transition-all">
                                {getTeleText("reschedule")}
                              </button>
                            </>
                          )}
                        </div>
                      </div>
                    </div>
                  ))}
              </div>
            )}
          </div>

          {/* Past Sessions */}
          <div>
            <h4 className="font-medium mb-3">{getTeleText("pastSessions")}</h4>
            <div className="space-y-3">
              {sessions
                .filter(
                  (s) => s.status === "COMPLETED" || s.status === "CANCELLED",
                )
                .slice(0, 3)
                .map((session) => (
                  <div
                    key={session.sessionId}
                    className="bg-white/30 p-3 rounded-lg border border-white/10"
                  >
                    <div className="flex items-center justify-between">
                      <div className="flex-1 min-w-0">
                        <div className="flex items-center space-x-2 mb-1">
                          <span className="font-medium text-sm">
                            {session.doctorName}
                          </span>
                          <span
                            className={`inline-flex items-center px-2 py-1 rounded-full text-xs ${getStatusColor(session.status)}`}
                          >
                            {getTeleText(
                              session.status.toLowerCase() as keyof typeof teleTexts.english,
                            )}
                          </span>
                        </div>
                        <p className="text-xs text-gray-600">
                          {formatDate(session.scheduledTime)} тАв{" "}
                          {session.duration} min
                        </p>
                      </div>
                      {session.status === "COMPLETED" && (
                        <div className="flex space-x-1">
                          <button className="bg-purple-600 text-white px-2 py-1 rounded text-xs hover:bg-purple-700 transition-all">
                            {getTeleText("prescription")}
                          </button>
                          <button className="bg-blue-600 text-white px-2 py-1 rounded text-xs hover:bg-blue-700 transition-all">
                            {getTeleText("followUp")}
                          </button>
                        </div>
                      )}
                    </div>
                  </div>
                ))}
            </div>
          </div>
        </div>
      )}

      {/* Booking Modal */}
      {showBooking && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-xl p-6 w-full max-w-md max-h-[90vh] overflow-y-auto">
            <h3 className="text-lg font-semibold mb-4">
              {getTeleText("bookConsultation")}
            </h3>

            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium mb-1">
                  {getTeleText("consultationType")}
                </label>
                <select
                  value={consultationType}
                  onChange={(e) =>
                    setConsultationType(
                      e.target.value as "general" | "specialist",
                    )
                  }
                  className="w-full p-3 border rounded-lg"
                >
                  <option value="general">{getTeleText("general")}</option>
                  <option value="specialist">
                    {getTeleText("specialist")}
                  </option>
                </select>
              </div>

              <div>
                <label className="block text-sm font-medium mb-1">
                  {getTeleText("selectDoctor")}
                </label>
                <select
                  value={selectedDoctor}
                  onChange={(e) => setSelectedDoctor(e.target.value)}
                  className="w-full p-3 border rounded-lg"
                >
                  <option value="">{getTeleText("selectDoctor")}</option>
                  {availableDoctors.map((doctor) => (
                    <option key={doctor.id} value={doctor.id}>
                      {doctor.name} - {doctor.specialization} (тнР{" "}
                      {doctor.rating})
                    </option>
                  ))}
                </select>
              </div>

              <div>
                <label className="block text-sm font-medium mb-1">
                  {getTeleText("selectDate")}
                </label>
                <input
                  type="date"
                  value={appointmentDate}
                  onChange={(e) => setAppointmentDate(e.target.value)}
                  min={new Date().toISOString().split("T")[0]}
                  className="w-full p-3 border rounded-lg"
                />
              </div>

              <div>
                <label className="block text-sm font-medium mb-1">
                  {getTeleText("selectTime")}
                </label>
                <select
                  value={appointmentTime}
                  onChange={(e) => setAppointmentTime(e.target.value)}
                  className="w-full p-3 border rounded-lg"
                >
                  <option value="">{getTeleText("selectTime")}</option>
                  {generateTimeSlots().map((time) => (
                    <option key={time} value={time}>
                      {time}
                    </option>
                  ))}
                </select>
              </div>

              <div>
                <label className="block text-sm font-medium mb-1">
                  {getTeleText("symptoms")}
                </label>
                <textarea
                  value={symptoms}
                  onChange={(e) => setSymptoms(e.target.value)}
                  className="w-full p-3 border rounded-lg h-24 resize-none"
                  placeholder={getTeleText("enterSymptoms")}
                />
              </div>
            </div>

            <div className="flex space-x-3 mt-6">
              <button
                onClick={() => setShowBooking(false)}
                className="flex-1 bg-gray-300 text-gray-700 py-2 px-4 rounded-lg hover:bg-gray-400 transition-all"
              >
                {getTeleText("close")}
              </button>
              <button
                onClick={handleBookConsultation}
                disabled={
                  isLoading ||
                  !selectedDoctor ||
                  !appointmentDate ||
                  !appointmentTime
                }
                className="flex-1 bg-blue-600 text-white py-2 px-4 rounded-lg hover:bg-blue-700 transition-all disabled:opacity-50"
              >
                {isLoading ? "Booking..." : getTeleText("save")}
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
