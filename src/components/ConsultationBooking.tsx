import React, { useState } from "react";
import { useLanguage } from "../contexts/LanguageContext";

interface Specialty {
  id: string;
  name: string;
  icon: string;
  description: string;
  consultationType: "video" | "chat" | "both";
  availableDoctors: number;
  averageWaitTime: string;
  isPrivacySensitive?: boolean;
}

interface Doctor {
  id: string;
  name: string;
  specialtyId: string;
  experience: string;
  rating: number;
  available: boolean;
  nextSlot: string;
  language: string[];
}

interface ConsultationBookingProps {
  onBookConsultation?: (booking: any) => void;
  className?: string;
}

export default function ConsultationBooking({
  onBookConsultation,
  className = "",
}: ConsultationBookingProps) {
  const [selectedSpecialty, setSelectedSpecialty] = useState<string>("");
  const [consultationType, setConsultationType] = useState<"video" | "chat">(
    "video",
  );
  const [selectedDoctor, setSelectedDoctor] = useState<string>("");
  const [selectedTimeSlot, setSelectedTimeSlot] = useState<string>("");
  const [step, setStep] = useState<
    "specialty" | "type" | "doctor" | "time" | "confirm"
  >("specialty");

  const { currentLanguage } = useLanguage();

  const consultationTexts = {
    english: {
      header: "Multi-Specialty Consultation",
      subHeader: "Choose video or chat consultation based on your comfort",
      steps: [
        "Select Medical Specialty",
        "Choose Consultation Type",
        "Select Doctor",
        "Pick Time Slot",
        "Confirm Booking"
      ],
      confirmBooking: "Confirm Your Booking",
      specialty: "Specialty",
      consultationType: "Consultation Type",
      doctor: "Doctor",
      time: "Time",
      confirm: "Confirm Booking",
      back: "Back",
      videoConsultation: "Video Consultation",
      chatConsultation: "Chat Consultation",
      faceToFace: "Face-to-face consultation with doctor",
      textBased: "Text-based private consultation",
      personalInteraction: "тЬУ Personal interaction",
      visualExamination: "тЬУ Visual examination",
      realTimeDiagnosis: "тЬУ Real-time diagnosis",
      completePrivacy: "тЬУ Complete privacy",
      writtenRecords: "тЬУ Written records",
      comfortableSensitiveTopics: "тЬУ Comfortable for sensitive topics",
      sensitiveConsultations: "тЬУ Recommended for sensitive consultations",
      privacyNoticeHeader: "Privacy Notice",
      privacyNoticeBody: "This specialty involves sensitive topics. Chat consultation provides complete privacy and may be more comfortable for discussing personal health matters.",
      availableSlots: "Available slots for today",
      availableDoctors: "Available Doctors for",
      videoCall: "ЁЯУ╣ Video Call",
      chat: "ЁЯТм Chat",
      nextSlot: "Next slot"
    },
    hindi: {
      header: "рдорд▓реНрдЯреА-рд╕реНрдкреЗрд╢рд▓реНрдЯреА рдкрд░рд╛рдорд░реНрд╢",
      subHeader: "рдЕрдкрдиреЗ рдЖрд░рд╛рдо рдХреЗ рдЕрдиреБрд╕рд╛рд░ рд╡реАрдбрд┐рдпреЛ рдпрд╛ рдЪреИрдЯ рдкрд░рд╛рдорд░реНрд╢ рдЪреБрдиреЗрдВ",
      steps: [
        "рдореЗрдбрд┐рдХрд▓ рд╕реНрдкреЗрд╢рд▓рд┐рдЯреА рдЪреБрдиреЗрдВ",
        "рдкрд░рд╛рдорд░реНрд╢ рдкреНрд░рдХрд╛рд░ рдЪреБрдиреЗрдВ",
        "рдбреЙрдХреНрдЯрд░ рдЪреБрдиреЗрдВ",
        "рд╕рдордп рд╕реНрд▓реЙрдЯ рдЪреБрдиреЗрдВ",
        "рдмреБрдХрд┐рдВрдЧ рдХреА рдкреБрд╖реНрдЯрд┐ рдХрд░реЗрдВ"
      ],
      confirmBooking: "рдЕрдкрдиреА рдмреБрдХрд┐рдВрдЧ рдХреА рдкреБрд╖реНрдЯрд┐ рдХрд░реЗрдВ",
      specialty: "рд╕реНрдкреЗрд╢рд▓рд┐рдЯреА",
      consultationType: "рдкрд░рд╛рдорд░реНрд╢ рдкреНрд░рдХрд╛рд░",
      doctor: "рдбреЙрдХреНрдЯрд░",
      time: "рд╕рдордп",
      confirm: "рдмреБрдХрд┐рдВрдЧ рдХреА рдкреБрд╖реНрдЯрд┐ рдХрд░реЗрдВ",
      back: "рд╡рд╛рдкрд╕",
      videoConsultation: "рд╡реАрдбрд┐рдпреЛ рдкрд░рд╛рдорд░реНрд╢",
      chatConsultation: "рдЪреИрдЯ рдкрд░рд╛рдорд░реНрд╢",
      faceToFace: "рдбреЙрдХреНрдЯрд░ рдХреЗ рд╕рд╛рде рдЖрдордиреЗ-рд╕рд╛рдордиреЗ рдкрд░рд╛рдорд░реНрд╢",
      textBased: "рдЯреЗрдХреНрд╕реНрдЯ-рдЖрдзрд╛рд░рд┐рдд рдирд┐рдЬреА рдкрд░рд╛рдорд░реНрд╢",
      personalInteraction: "тЬУ рд╡реНрдпрдХреНрддрд┐рдЧрдд рд╕рдВрдкрд░реНрдХ",
      visualExamination: "тЬУ рджреГрд╢реНрдп рдкрд░реАрдХреНрд╖рд╛",
      realTimeDiagnosis: "тЬУ рд╡рд╛рд╕реНрддрд╡рд┐рдХ рд╕рдордп рдирд┐рджрд╛рди",
      completePrivacy: "тЬУ рдкреВрд░реНрдг рдЧреЛрдкрдиреАрдпрддрд╛",
      writtenRecords: "тЬУ рд▓рд┐рдЦрд┐рдд рд░рд┐рдХреЙрд░реНрдб",
      comfortableSensitiveTopics: "тЬУ рд╕рдВрд╡реЗрджрдирд╢реАрд▓ рд╡рд┐рд╖рдпреЛрдВ рдХреЗ рд▓рд┐рдП рдЖрд░рд╛рдорджрд╛рдпрдХ",
      sensitiveConsultations: "тЬУ рд╕рдВрд╡реЗрджрдирд╢реАрд▓ рдкрд░рд╛рдорд░реНрд╢ рдХреЗ рд▓рд┐рдП рдЕрдиреБрд╢рдВрд╕рд┐рдд",
      privacyNoticeHeader: "рдЧреЛрдкрдиреАрдпрддрд╛ рд╕реВрдЪрдирд╛",
      privacyNoticeBody: "рдпрд╣ рд╡рд┐рд╢реЗрд╖рддрд╛ рд╕рдВрд╡реЗрджрдирд╢реАрд▓ рд╡рд┐рд╖рдпреЛрдВ рдХреЛ рд╢рд╛рдорд┐рд▓ рдХрд░рддреА рд╣реИред рдЪреИрдЯ рдкрд░рд╛рдорд░реНрд╢ рдкреВрд░реА рдЧреЛрдкрдиреАрдпрддрд╛ рдкреНрд░рджрд╛рди рдХрд░рддрд╛ рд╣реИ рдФрд░ рд╡реНрдпрдХреНрддрд┐рдЧрдд рд╕реНрд╡рд╛рд╕реНрдереНрдп рдорд╛рдорд▓реЛрдВ рдкрд░ рдЪрд░реНрдЪрд╛ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдЕрдзрд┐рдХ рдЖрд░рд╛рдорджрд╛рдпрдХ рд╣реЛ рд╕рдХрддрд╛ рд╣реИред",
      availableSlots: "рдЖрдЬ рдХреЗ рд▓рд┐рдП рдЙрдкрд▓рдмреНрдз рд╕реНрд▓реЙрдЯ",
      availableDoctors: "рдХреЗ рд▓рд┐рдП рдЙрдкрд▓рдмреНрдз рдбреЙрдХреНрдЯрд░",
      videoCall: "ЁЯУ╣ рд╡реАрдбрд┐рдпреЛ рдХреЙрд▓",
      chat: "ЁЯТм рдЪреИрдЯ",
      nextSlot: "рдЕрдЧрд▓рд╛ рд╕реНрд▓реЙрдЯ"
    },
    tamil: {
      header: "рокро▓ роЪро┐ро▒рокрпНрокрпБ роЖро▓рпЛроЪройрпИ",
      subHeader: "роЙроЩрпНроХро│рпН ро╡роЪродро┐роХрпНроХрпЗро▒рпНрок ро╡рпАроЯро┐ропрпЛ роЕро▓рпНро▓родрпБ роЪрпЖро╛роЯрпНроЪрпЗрокрпН роЖро▓рпЛроЪройрпИ родрпЗро░рпНроирпНродрпЖроЯрпБроХрпНроХро╡рпБроорпН",
      steps: [
        "рооро░рпБродрпНродрпБро╡ роЪро┐ро▒рокрпНрокрпБ родрпЗро░рпНроирпНродрпЖроЯрпБроХрпНроХро╡рпБроорпН",
        "роЖро▓рпЛроЪройрпИ ро╡роХрпИропрпИ родрпЗро░рпНроирпНродрпЖроЯрпБроХрпНроХро╡рпБроорпН",
        "рооро░рпБродрпНродрпБро╡ро░рпИ родрпЗро░рпНроирпНродрпЖроЯрпБроХрпНроХро╡рпБроорпН",
        "роЪрооропроорпН роЗроЯроЩрпНроХро│рпИ родрпЗро░рпНроирпНродрпЖроЯрпБроХрпНроХро╡рпБроорпН",
        "рокродро┐ро╡рпБ роЙро▒рпБродро┐роЪрпЖропрпНроХ",
      ],
      confirmBooking: "роЙроЩрпНроХро│рпН рокродро┐ро╡рпИ роЙро▒рпБродро┐роЪрпЖропрпНроХ",
      specialty: "роЪро┐ро▒рокрпНрокрпБ",
      consultationType: "роЖро▓рпЛроЪройрпИ ро╡роХрпИ",
      doctor: "рооро░рпБродрпНродрпБро╡ро░рпН",
      time: "роирпЗро░роорпН",
      confirm: "рокродро┐ро╡рпБ роЙро▒рпБродро┐роЪрпЖропрпНроХ",
      back: "роорпАрогрпНроЯрпБроорпН",
      videoConsultation: "ро╡рпАроЯро┐ропрпЛ роЖро▓рпЛроЪройрпИ",
      chatConsultation: "роЪрпЖро╛роЯрпНроЪрпЗрокрпН роЖро▓рпЛроЪройрпИ",
      faceToFace: "рооро░рпБродрпНродрпБро╡ро░рпБроЯройрпН роирпЗро░роЯро┐ роЖро▓рпЛроЪройрпИ",
      textBased: "роЪрпЖро╛роЯрпНроЪрпЗрокрпН роЕроЯро┐рокрпНрокроЯрпИропро┐ро▓ро╛рой родройро┐рокрпНрокроЯрпНроЯ роЖро▓рпЛроЪройрпИ",
      personalInteraction: "тЬУ родройро┐рокрпНрокроЯрпНроЯ родрпКроЯро░рпНрокрпБ",
      visualExamination: "тЬУ роХро╛роЯрпНроЪро┐ рокро░ро┐роЪрпЛродройрпИ",
      realTimeDiagnosis: "тЬУ роирпЗро░роЯро┐ рооро░рпБродрпНродрпБро╡роорпН",
      completePrivacy: "тЬУ роорпБро┤рпБ родройро┐роорпИ",
      writtenRecords: "тЬУ роОро┤рпБродрокрпНрокроЯрпНроЯ рокродро┐ро╡рпБроХро│рпН",
      comfortableSensitiveTopics: "тЬУ роЙрогро░рпНроЪрпНроЪро┐рооро┐роХрпНроХ рокрпКро░рпБроЯрпНроХро│рпБроХрпНроХрпБ ро╡роЪродро┐ропро╛ройродрпБ",
      sensitiveConsultations: "тЬУ роЙрогро░рпНроЪрпНроЪро┐рооро┐роХрпНроХ роЖро▓рпЛроЪройрпИроХро│рпБроХрпНроХрпБ рокро░ро┐роирпНродрпБро░рпИроХрпНроХрокрпНрокроЯрпБроХро┐ро▒родрпБ",
      privacyNoticeHeader: "родройро┐роорпИ роЕро▒ро┐ро╡ро┐рокрпНрокрпБ",
      privacyNoticeBody: "роЗроирпНрод роЪро┐ро▒рокрпНрокрпБ роЙрогро░рпНроЪрпНроЪро┐рооро┐роХрпНроХ рокрпКро░рпБроЯрпНроХро│рпИ роЙро│рпНро│роЯроХрпНроХро┐ропродрпБ. роЪрпЖро╛роЯрпНроЪрпЗрокрпН роЖро▓рпЛроЪройрпИ роорпБро┤рпБ родройро┐роорпИропрпИ ро╡ро┤роЩрпНроХрпБроХро┐ро▒родрпБ рооро▒рпНро▒рпБроорпН родройро┐рокрпНрокроЯрпНроЯ рооро░рпБродрпНродрпБро╡ ро╡ро┐ро╖ропроЩрпНроХро│рпИрокрпН рокро▒рпНро▒ро┐ рокрпЗроЪрпБро╡родро▒рпНроХрпБ роЕродро┐роХ ро╡роЪродро┐ропро╛роХ роЗро░рпБроХрпНроХро▓ро╛роорпН.",
      availableSlots: "роЗройрпНро▒рпИропроХрпНроХрпБ роХро┐роЯрпИроХрпНроХрпБроорпН роЗроЯроЩрпНроХро│рпН",
      availableDoctors: "роХро┐роЯрпИроХрпНроХрпБроорпН рооро░рпБродрпНродрпБро╡ро░рпНроХро│рпН",
      videoCall: "ЁЯУ╣ ро╡рпАроЯро┐ропрпЛ роЕро┤рпИрокрпНрокрпБ",
      chat: "ЁЯТм роЪрпЖро╛роЯрпНроЪрпЗрокрпН",
      nextSlot: "рокро┐ройрпНройро░рпН роЗроЯроорпН"
    },
    telugu: {
      header: "р░ор░▓р▒Нр░Яр▒А-р░╕р▒Нр░кр▒Жр░╖р░▓р▒Нр░Яр▒А р░Хр░ир▒Нр░╕р░▓р▒Нр░Яр▒Зр░╖р░ир▒Н",
      subHeader: "р░ор▒А р░╕р▒Мр░Хр░░р▒Нр░пр░В р░кр▒Нр░░р░Хр░╛р░░р░В р░╡р▒Ар░бр░┐р░пр▒Л р░▓р▒Зр░жр░╛ р░Ър░╛р░Яр▒Н р░Хр░ир▒Нр░╕р░▓р▒Нр░Яр▒Зр░╖р░ир▒Н р░Ор░Вр░Ър▒Бр░Хр▒Лр░Вр░бр░┐",
      steps: [
        "р░ор▒Жр░бр░┐р░Хр░▓р▒Н р░╕р▒Нр░кр▒Жр░╖р░▓р▒Нр░Яр▒А р░Ор░Вр░Ър▒Бр░Хр▒Лр░Вр░бр░┐",
        "р░Хр░ир▒Нр░╕р░▓р▒Нр░Яр▒Зр░╖р░ир▒Н р░░р░Хр░В р░Ор░Вр░Ър▒Бр░Хр▒Лр░Вр░бр░┐",
        "р░бр░╛р░Хр▒Нр░Яр░░р▒НтАМр░ир░┐ р░Ор░Вр░Ър▒Бр░Хр▒Лр░Вр░бр░┐",
        "р░╕р░ор░п р░╕р▒Нр░▓р░╛р░Яр▒НтАМр░ир░┐ р░Ор░Вр░Ър▒Бр░Хр▒Лр░Вр░бр░┐",
        "р░мр▒Бр░Хр░┐р░Вр░Чр▒НтАМр░ир▒Б р░зр▒Гр░╡р▒Ар░Хр░░р░┐р░Вр░Ър░Вр░бр░┐",
      ],
      confirmBooking: "р░ор▒А р░мр▒Бр░Хр░┐р░Вр░Чр▒НтАМр░ир▒Б р░зр▒Гр░╡р▒Ар░Хр░░р░┐р░Вр░Ър░Вр░бр░┐",
      specialty: "р░╕р▒Нр░кр▒Жр░╖р░▓р▒Нр░Яр▒А",
      consultationType: "р░Хр░ир▒Нр░╕р░▓р▒Нр░Яр▒Зр░╖р░ир▒Н р░░р░Хр░В",
      doctor: "р░бр░╛р░Хр▒Нр░Яр░░р▒Н",
      time: "р░╕р░ор░пр░В",
      confirm: "р░мр▒Бр░Хр░┐р░Вр░Чр▒НтАМр░ир▒Б р░зр▒Гр░╡р▒Ар░Хр░░р░┐р░Вр░Ър░Вр░бр░┐",
      back: "р░др░┐р░░р░┐р░Чр░┐",
      videoConsultation: "р░╡р▒Ар░бр░┐р░пр▒Л р░Хр░ир▒Нр░╕р░▓р▒Нр░Яр▒Зр░╖р░ир▒Н",
      chatConsultation: "р░Ър░╛р░Яр▒Н р░Хр░ир▒Нр░╕р░▓р▒Нр░Яр▒Зр░╖р░ир▒Н",
      faceToFace: "р░бр░╛р░Хр▒Нр░Яр░░р▒НтАМр░др▒Л р░ор▒Бр░Цр░╛р░ор▒Бр░Цр░┐ р░Хр░ир▒Нр░╕р░▓р▒Нр░Яр▒Зр░╖р░ир▒Н",
      textBased: "р░кр░╛р░ар░Вр░кр▒И р░Жр░зр░╛р░░р░┐р░д р░╡р▒Нр░пр░Хр▒Нр░др░┐р░Чр░д р░Хр░ир▒Нр░╕р░▓р▒Нр░Яр▒Зр░╖р░ир▒Н",
      personalInteraction: "тЬУ р░кр▒Нр░░р░др▒Нр░пр░Хр▒Нр░╖ р░кр░░р░┐р░ор░│р░В",
      visualExamination: "тЬУ р░Хр░╛р░Вр░Ър░┐р░Х р░кр░░р▒Ар░Хр▒Нр░╖",
      realTimeDiagnosis: "тЬУ р░кр▒Нр░░р░др▒Нр░пр░Хр▒Нр░╖ р░бр░пр░╛р░Чр▒Нр░ир▒Лр░╕р░┐р░╕р▒Н",
      completePrivacy: "тЬУ р░кр▒Вр░░р▒Нр░др░┐ р░Чр▒Лр░кр▒Нр░пр░д",
      writtenRecords: "тЬУ р░╡р▒Нр░░р░╛р░др░кр▒Вр░░р▒Нр░╡р░Х р░░р░┐р░Хр░╛р░░р▒Нр░бр▒Бр░▓р▒Б",
      comfortableSensitiveTopics: "тЬУ р░Ер░ир▒Нр░╡р▒Зр░╖р░г р░Ър▒Вр░╕р▒З р░Ер░Вр░╢р░╛р░▓р░Хр▒Б р░╕р▒Мр░Хр░░р▒Нр░пр░В",
      sensitiveConsultations: "тЬУ р░Ер░ир▒Нр░╡р▒Зр░╖р░г р░Ър▒Вр░╕р▒З р░Хр░ир▒Нр░╕р░▓р▒Нр░Яр▒Зр░╖р░ир▒Нр░▓р░Хр▒Б р░╕р░┐р░лр░╛р░░р▒Нр░╕р▒Б р░Ър▒Зр░пр░мр░бр░┐р░Вр░жр░┐",
      privacyNoticeHeader: "р░Чр▒Лр░кр▒Нр░пр░д р░ир▒Лр░Яр▒Ар░╕р▒Б",
      privacyNoticeBody: "р░И р░╕р▒Нр░кр▒Жр░╖р░▓р▒Нр░Яр▒А р░Ер░ир▒Нр░╡р▒Зр░╖р░г р░Ър▒Вр░╕р▒З р░Ер░Вр░╢р░╛р░▓р░ир▒Б р░Хр░▓р░┐р░Чр░┐ р░Йр░Вр░Яр▒Бр░Вр░жр░┐. р░Ър░╛р░Яр▒Н р░Хр░ир▒Нр░╕р░▓р▒Нр░Яр▒Зр░╖р░ир▒Н р░кр▒Вр░░р▒Нр░др░┐ р░Чр▒Лр░кр▒Нр░пр░др░ир▒Б р░Ер░Вр░жр░┐р░╕р▒Нр░др▒Бр░Вр░жр░┐ р░ор░░р░┐р░пр▒Б р░╡р▒Нр░пр░Хр▒Нр░др░┐р░Чр░д р░╡р▒Ир░жр▒Нр░п р░╡р░┐р░╖р░пр░╛р░▓ р░Чр▒Бр░░р░┐р░Вр░Ър░┐ р░Ър░░р▒Нр░Ър░┐р░Вр░Ър░бр░В р░ор░░р░┐р░Вр░д р░╕р▒Мр░Хр░░р▒Нр░пр░Вр░Чр░╛ р░Йр░Вр░Яр▒Бр░Вр░жр░┐.",
      availableSlots: "р░И р░░р▒Лр░Ьр▒Б р░Ер░Вр░жр▒Бр░мр░╛р░Яр▒Бр░▓р▒Л р░Йр░ир▒Нр░и р░╕р▒Нр░▓р░╛р░Яр▒Нр░╕р▒Н",
      availableDoctors: "р░Хр▒Лр░╕р░В р░Ер░Вр░жр▒Бр░мр░╛р░Яр▒Бр░▓р▒Л р░Йр░ир▒Нр░и р░бр░╛р░Хр▒Нр░Яр░░р▒Нр░▓р▒Б",
      videoCall: "ЁЯУ╣ р░╡р▒Ар░бр░┐р░пр▒Л р░Хр░╛р░▓р▒Н",
      chat: "ЁЯТм р░Ър░╛р░Яр▒Н",
      nextSlot: "р░др░░р▒Нр░╡р░╛р░д р░╕р▒Нр░▓р░╛р░Яр▒Н"
    },
    bengali: {
      header: "ржорж╛рж▓рзНржЯрж┐-рж╕рзНржкрзЗрж╢рж╛рж▓рзНржЯрж┐ ржХржирж╕рж╛рж▓рзНржЯрзЗрж╢ржи",
      subHeader: "ржЖржкржирж╛рж░ рж╕рж╛ржирзНрждрзНржмржирж╛ ржЕржирзБржпрж╛ржпрж╝рзА ржнрж┐ржбрж┐ржУ ржмрж╛ ржЪрзНржпрж╛ржЯ ржХржирж╕рж╛рж▓рзНржЯрзЗрж╢ржи ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи",
      steps: [
        "ржорзЗржбрж┐ржХрзЗрж▓ рж╕рзНржкрзЗрж╢рж╛рж▓рзНржЯрж┐ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи",
        "ржХржирж╕рж╛рж▓рзНржЯрзЗрж╢ржи ржкрзНрж░ржХрж╛рж░ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи",
        "ржбрж╛ржХрзНрждрж╛рж░ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи",
        "рж╕ржоржпрж╝ рж╕рзНрж▓ржЯ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи",
        "ржмрзБржХрж┐ржВ ржирж┐рж╢рзНржЪрж┐ржд ржХрж░рзБржи"
      ],
      confirmBooking: "ржЖржкржирж╛рж░ ржмрзБржХрж┐ржВ ржирж┐рж╢рзНржЪрж┐ржд ржХрж░рзБржи",
      specialty: "рж╕рзНржкрзЗрж╢рж╛рж▓рзНржЯрж┐",
      consultationType: "ржХржирж╕рж╛рж▓рзНржЯрзЗрж╢ржи ржкрзНрж░ржХрж╛рж░",
      doctor: "ржбрж╛ржХрзНрждрж╛рж░",
      time: "рж╕ржоржпрж╝",
      confirm: "ржмрзБржХрж┐ржВ ржирж┐рж╢рзНржЪрж┐ржд ржХрж░рзБржи",
      back: "ржлрж┐рж░рзЗ",
      videoConsultation: "ржнрж┐ржбрж┐ржУ ржХржирж╕рж╛рж▓рзНржЯрзЗрж╢ржи",
      chatConsultation: "ржЪрзНржпрж╛ржЯ ржХржирж╕рж╛рж▓рзНржЯрзЗрж╢ржи",
      faceToFace: "ржбрж╛ржХрзНрждрж╛рж░ рж╕ржЩрзНржЧрзЗ ржорзБржЦрзЛржорзБржЦрж┐ ржкрж░рж╛ржорж░рзНрж╢",
      textBased: "ржкрж╛ржарзНржп ржнрж┐рждрзНрждрж┐ржХ ржмрзНржпржХрзНрждрж┐ржЧржд ржкрж░рж╛ржорж░рзНрж╢",
      personalInteraction: "тЬУ ржмрзНржпржХрзНрждрж┐ржЧржд ржорж┐ржерж╕рзНржХрзНрж░рж┐ржпрж╝рж╛",
      visualExamination: "тЬУ ржжрзГрж╢рзНржпржорж╛ржи ржкрж░рзАржХрзНрж╖рж╛",
      realTimeDiagnosis: "тЬУ ржмрж╛рж╕рзНрждржм рж╕ржоржпрж╝ ржирж┐рж░рзНржгржпрж╝",
      completePrivacy: "тЬУ рж╕ржорзНржкрзВрж░рзНржг ржЧрзЛржкржирзАржпрж╝рждрж╛",
      writtenRecords: "тЬУ рж▓рж┐ржЦрж┐ржд рж░рзЗржХрж░рзНржб",
      comfortableSensitiveTopics: "тЬУ рж╕ржВржмрзЗржжржирж╢рзАрж▓ ржмрж┐рж╖ржпрж╝ржЧрзБрж▓рж┐рж░ ржЬржирзНржп ржЖрж░рж╛ржоржжрж╛ржпрж╝ржХ",
      sensitiveConsultations: "тЬУ рж╕ржВржмрзЗржжржирж╢рзАрж▓ ржкрж░рж╛ржорж░рзНрж╢рзЗрж░ ржЬржирзНржп рж╕рзБржкрж╛рж░рж┐рж╢ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ",
      privacyNoticeHeader: "ржЧрзЛржкржирзАржпрж╝рждрж╛ ржирзЛржЯрж┐рж╢",
      privacyNoticeBody: "ржПржЗ ржмрж┐рж╢рзЗрж╖рждрзНржм рж╕ржВржмрзЗржжржирж╢рзАрж▓ ржмрж┐рж╖ржпрж╝ржЧрзБрж▓рж┐ржХрзЗ ржЕржирзНрждрж░рзНржнрзБржХрзНржд ржХрж░рзЗрз╖ ржЪрзНржпрж╛ржЯ ржкрж░рж╛ржорж░рзНрж╢ рж╕ржорзНржкрзВрж░рзНржг ржЧрзЛржкржирзАржпрж╝рждрж╛ ржкрзНрж░ржжрж╛ржи ржХрж░рзЗ ржПржмржВ ржмрзНржпржХрзНрждрж┐ржЧржд рж╕рзНржмрж╛рж╕рзНржерзНржп ржмрж┐рж╖ржпрж╝ржЧрзБрж▓рж┐ ржЖрж▓рзЛржЪржирж╛ ржХрж░рж╛рж░ ржЬржирзНржп ржЖрж░ржУ ржЖрж░рж╛ржоржжрж╛ржпрж╝ржХ рж╣рждрзЗ ржкрж╛рж░рзЗрз╖",
      availableSlots: "ржЖржЬржХрзЗрж░ ржЬржирзНржп ржЙржкрж▓ржнрзНржп рж╕рзНрж▓ржЯ",
      availableDoctors: "ржЬржирзНржп ржЙржкрж▓ржнрзНржп ржбрж╛ржХрзНрждрж╛рж░",
      videoCall: "ЁЯУ╣ ржнрж┐ржбрж┐ржУ ржХрж▓",
      chat: "ЁЯТм ржЪрзНржпрж╛ржЯ",
      nextSlot: "ржкрж░ржмрж░рзНрждрзА рж╕рзНрж▓ржЯ"
    }
  };

  const getConsultationText = (key: keyof typeof consultationTexts.english): string => {
    return (
      consultationTexts[currentLanguage as keyof typeof consultationTexts]?.[key] ||
      consultationTexts.english[key]
    );
  };

  const specialties: Specialty[] = [
    {
      id: "general",
      name: "General Medicine",
      icon: "ЁЯй║",
      description: "General health concerns, routine checkups",
      consultationType: "both",
      availableDoctors: 12,
      averageWaitTime: "5-10 mins",
    },
    {
      id: "gynecology",
      name: "Gynecology",
      icon: "ЁЯд▒",
      description: "Women's health, pregnancy care",
      consultationType: "both",
      availableDoctors: 8,
      averageWaitTime: "10-15 mins",
      isPrivacySensitive: true,
    },
    {
      id: "sexology",
      name: "Sexual Health",
      icon: "ЁЯТХ",
      description: "Sexual health concerns, reproductive issues",
      consultationType: "both",
      availableDoctors: 5,
      averageWaitTime: "15-20 mins",
      isPrivacySensitive: true,
    },
    {
      id: "psychiatry",
      name: "Mental Health",
      icon: "ЁЯза",
      description: "Mental health, counseling, therapy",
      consultationType: "both",
      availableDoctors: 6,
      averageWaitTime: "20-30 mins",
      isPrivacySensitive: true,
    },
    {
      id: "dermatology",
      name: "Dermatology",
      icon: "ЁЯз┤",
      description: "Skin conditions, hair, nail problems",
      consultationType: "both",
      availableDoctors: 4,
      averageWaitTime: "15-25 mins",
    },
    {
      id: "pediatrics",
      name: "Pediatrics",
      icon: "ЁЯС╢",
      description: "Child health, infant care",
      consultationType: "both",
      availableDoctors: 7,
      averageWaitTime: "10-15 mins",
    },
    {
      id: "cardiology",
      name: "Cardiology",
      icon: "тЭдя╕П",
      description: "Heart conditions, blood pressure",
      consultationType: "both",
      availableDoctors: 3,
      averageWaitTime: "25-35 mins",
    },
    {
      id: "orthopedics",
      name: "Orthopedics",
      icon: "ЁЯж┤",
      description: "Bone, joint, muscle problems",
      consultationType: "both",
      availableDoctors: 5,
      averageWaitTime: "20-30 mins",
    },
  ];

  const doctors: Doctor[] = [
    {
      id: "dr1",
      name: "Dr. Priya Sharma",
      specialtyId: "gynecology",
      experience: "12 years",
      rating: 4.8,
      available: true,
      nextSlot: "10:30 AM",
      language: ["English", "Hindi", "Tamil"],
    },
    {
      id: "dr2",
      name: "Dr. Rajesh Kumar",
      specialtyId: "general",
      experience: "8 years",
      rating: 4.6,
      available: true,
      nextSlot: "11:00 AM",
      language: ["English", "Hindi", "Telugu"],
    },
    {
      id: "dr3",
      name: "Dr. Meera Reddy",
      specialtyId: "sexology",
      experience: "15 years",
      rating: 4.9,
      available: true,
      nextSlot: "2:00 PM",
      language: ["English", "Telugu", "Kannada"],
    },
  ];

  const timeSlots = [
    "9:00 AM",
    "9:30 AM",
    "10:00 AM",
    "10:30 AM",
    "11:00 AM",
    "11:30 AM",
    "2:00 PM",
    "2:30 PM",
    "3:00 PM",
    "3:30 PM",
    "4:00 PM",
    "4:30 PM",
    "5:00 PM",
    "5:30 PM",
    "6:00 PM",
  ];

  const selectedSpecialtyData = specialties.find(
    (s) => s.id === selectedSpecialty,
  );
  const availableDoctors = doctors.filter(
    (d) => d.specialtyId === selectedSpecialty && d.available,
  );

  const handleBooking = () => {
    const booking = {
      specialty: selectedSpecialtyData,
      consultationType,
      doctor: doctors.find((d) => d.id === selectedDoctor),
      timeSlot: selectedTimeSlot,
      bookingId:
        "BOOK-" + Math.random().toString(36).substr(2, 9).toUpperCase(),
      status: "confirmed",
    };

    if (onBookConsultation) {
      onBookConsultation(booking);
    }

    // Reset form
    setStep("specialty");
    setSelectedSpecialty("");
    setSelectedDoctor("");
    setSelectedTimeSlot("");
  };

  return (
    <div className={`${className}`}>
      {/* Header */}
      <div className="bg-white/80 backdrop-blur-sm rounded-2xl shadow-xl p-6 border border-white/20 mb-6">
        <h2 className="text-2xl font-bold text-gray-800 flex items-center">
          <span className="mr-3">ЁЯСитАНтЪХя╕П</span>
          {getConsultationText("header")}
        </h2>
        <p className="text-gray-600 mt-1">
          {getConsultationText("subHeader")}
        </p>
      </div>

      {/* Progress Steps */}
      <div className="mb-8">
        <div className="flex items-center justify-between mb-4">
          {["specialty", "type", "doctor", "time", "confirm"].map(
            (stepName, index) => (
              <div key={stepName} className="flex items-center">
                <div
                  className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-medium ${
                    step === stepName
                      ? "bg-blue-600 text-white"
                      : [
                            "specialty",
                            "type",
                            "doctor",
                            "time",
                            "confirm",
                          ].indexOf(step) > index
                        ? "bg-green-500 text-white"
                        : "bg-gray-200 text-gray-600"
                  }`}
                >
                  {index + 1}
                </div>
                {index < 4 && (
                  <div
                    className={`w-16 h-1 mx-2 ${
                      [
                        "specialty",
                        "type",
                        "doctor",
                        "time",
                        "confirm",
                      ].indexOf(step) > index
                        ? "bg-green-500"
                        : "bg-gray-200"
                    }`}
                  ></div>
                )}
              </div>
            ),
          )}
        </div>
        <div className="text-center text-sm text-gray-600 font-medium">
          {step === "specialty" && getConsultationText("steps")[0]}
          {step === "type" && getConsultationText("steps")[1]}
          {step === "doctor" && getConsultationText("steps")[2]}
          {step === "time" && getConsultationText("steps")[3]}
          {step === "confirm" && getConsultationText("steps")[4]}
        </div>
      </div>

      {/* Step 1: Select Specialty */}
      {step === "specialty" && (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          {specialties.map((specialty) => (
            <button
              key={specialty.id}
              onClick={() => {
                setSelectedSpecialty(specialty.id);
                setStep("type");
              }}
              className="bg-white/80 backdrop-blur-sm p-6 rounded-2xl shadow-xl border border-white/20 hover:shadow-2xl transition-all duration-300 hover:scale-105 text-left"
            >
              <div className="flex items-center justify-between mb-3">
                <div className="w-12 h-12 bg-gradient-to-br from-blue-500 to-purple-600 rounded-xl flex items-center justify-center">
                  <span className="text-white text-2xl">{specialty.icon}</span>
                </div>
                {specialty.isPrivacySensitive && (
                  <div className="bg-purple-100 text-purple-800 px-2 py-1 rounded-full text-xs">
                    ЁЯФТ Private
                  </div>
                )}
              </div>
              <h3 className="text-lg font-semibold text-gray-800 mb-2">
                {specialty.name}
              </h3>
              <p className="text-sm text-gray-600 mb-3">
                {specialty.description}
              </p>
              <div className="flex justify-between text-xs text-gray-500">
                <span>{specialty.availableDoctors} doctors</span>
                <span>{specialty.averageWaitTime}</span>
              </div>
            </button>
          ))}
        </div>
      )}

      {/* Step 2: Select Consultation Type */}
      {step === "type" && selectedSpecialtyData && (
        <div className="max-w-2xl mx-auto">
          <div className="mb-6 text-center">
            <h3 className="text-xl font-semibold text-gray-800 mb-2">
              {selectedSpecialtyData.name} Consultation
            </h3>
            <p className="text-gray-600">
              {getConsultationText("subHeader")}
            </p>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <button
              onClick={() => {
                setConsultationType("video");
                setStep("doctor");
              }}
              className="bg-white/80 backdrop-blur-sm p-8 rounded-2xl shadow-xl border border-white/20 hover:shadow-2xl transition-all duration-300 hover:scale-105"
            >
              <div className="text-center">
                <div className="w-16 h-16 bg-gradient-to-br from-blue-500 to-blue-600 rounded-2xl flex items-center justify-center mx-auto mb-4">
                  <span className="text-white text-3xl">ЁЯУ╣</span>
                </div>
                <h4 className="text-lg font-semibold text-gray-800 mb-2">
                  {getConsultationText("videoConsultation")}
                </h4>
                <p className="text-sm text-gray-600 mb-4">
                  {getConsultationText("faceToFace")}
                </p>
                <div className="space-y-2 text-xs text-gray-500">
                  <div>{getConsultationText("personalInteraction")}</div>
                  <div>{getConsultationText("visualExamination")}</div>
                  <div>{getConsultationText("realTimeDiagnosis")}</div>
                </div>
              </div>
            </button>

            <button
              onClick={() => {
                setConsultationType("chat");
                setStep("doctor");
              }}
              className="bg-white/80 backdrop-blur-sm p-8 rounded-2xl shadow-xl border border-white/20 hover:shadow-2xl transition-all duration-300 hover:scale-105"
            >
              <div className="text-center">
                <div className="w-16 h-16 bg-gradient-to-br from-green-500 to-green-600 rounded-2xl flex items-center justify-center mx-auto mb-4">
                  <span className="text-white text-3xl">ЁЯТм</span>
                </div>
                <h4 className="text-lg font-semibold text-gray-800 mb-2">
                  {getConsultationText("chatConsultation")}
                </h4>
                <p className="text-sm text-gray-600 mb-4">
                  {getConsultationText("textBased")}
                </p>
                <div className="space-y-2 text-xs text-gray-500">
                  <div>{getConsultationText("completePrivacy")}</div>
                  <div>{getConsultationText("writtenRecords")}</div>
                  <div>{getConsultationText("comfortableSensitiveTopics")}</div>
                  {selectedSpecialtyData.isPrivacySensitive && (
                    <div className="text-purple-600">
                      {getConsultationText("sensitiveConsultations")}
                    </div>
                  )}
                </div>
              </div>
            </button>
          </div>

          {selectedSpecialtyData.isPrivacySensitive && (
            <div className="mt-6 bg-purple-50 border border-purple-200 rounded-lg p-4">
              <div className="flex items-center">
                <span className="text-purple-600 text-lg mr-2">ЁЯФТ</span>
                <div>
                  <h5 className="font-medium text-purple-800">
                    {getConsultationText("privacyNoticeHeader")}
                  </h5>
                  <p className="text-sm text-purple-700">
                    {getConsultationText("privacyNoticeBody")}
                  </p>
                </div>
              </div>
            </div>
          )}
        </div>
      )}

      {/* Step 3: Select Doctor */}
      {step === "doctor" && (
        <div className="max-w-4xl mx-auto">
          <div className="mb-6">
            <button
              onClick={() => setStep("type")}
              className="text-blue-600 hover:text-blue-800 flex items-center mb-4"
            >
              тЖР {getConsultationText("back")} to consultation type
            </button>
            <h3 className="text-xl font-semibold text-gray-800">
              {getConsultationText("availableDoctors")} {consultationType === "video" ? getConsultationText("videoConsultation") : getConsultationText("chatConsultation")}
            </h3>
          </div>

          <div className="grid gap-4">
            {availableDoctors.map((doctor) => (
              <button
                key={doctor.id}
                onClick={() => {
                  setSelectedDoctor(doctor.id);
                  setStep("time");
                }}
                className="bg-white/80 backdrop-blur-sm p-6 rounded-2xl shadow-xl border border-white/20 hover:shadow-2xl transition-all duration-300 hover:scale-105 text-left"
              >
                <div className="flex items-center space-x-4">
                  <div className="w-16 h-16 bg-gradient-to-br from-blue-500 to-purple-600 rounded-2xl flex items-center justify-center">
                    <span className="text-white text-2xl">ЁЯСитАНтЪХя╕П</span>
                  </div>
                  <div className="flex-1">
                    <div className="flex justify-between items-start">
                      <div>
                        <h4 className="text-lg font-semibold text-gray-800">
                          {doctor.name}
                        </h4>
                        <p className="text-gray-600">
                          {selectedSpecialtyData?.name} Specialist
                        </p>
                        <p className="text-sm text-gray-500">
                          {doctor.experience} experience
                        </p>
                      </div>
                      <div className="text-right">
                        <div className="flex items-center mb-1">
                          <span className="text-yellow-400">тнР</span>
                          <span className="text-sm font-medium ml-1">
                            {doctor.rating}
                          </span>
                        </div>
                        <div className="text-sm text-gray-500">
                          {getConsultationText("nextSlot")}: {doctor.nextSlot}
                        </div>
                      </div>
                    </div>
                    <div className="mt-3 flex flex-wrap gap-1">
                      {doctor.language.map((lang) => (
                        <span
                          key={lang}
                          className="bg-blue-100 text-blue-800 px-2 py-1 rounded-full text-xs"
                        >
                          {lang}
                        </span>
                      ))}
                    </div>
                  </div>
                </div>
              </button>
            ))}
          </div>
        </div>
      )}

      {/* Step 4: Select Time */}
      {step === "time" && (
        <div className="max-w-2xl mx-auto">
          <div className="mb-6">
            <button
              onClick={() => setStep("doctor")}
              className="text-blue-600 hover:text-blue-800 flex items-center mb-4"
            >
              тЖР {getConsultationText("back")} to doctor selection
            </button>
            <h3 className="text-xl font-semibold text-gray-800">
              {getConsultationText("steps")[3]}
            </h3>
            <p className="text-gray-600">{getConsultationText("availableSlots")}</p>
          </div>

          <div className="grid grid-cols-3 md:grid-cols-4 gap-3">
            {timeSlots.map((slot) => (
              <button
                key={slot}
                onClick={() => {
                  setSelectedTimeSlot(slot);
                  setStep("confirm");
                }}
                className="bg-white/80 backdrop-blur-sm p-4 rounded-lg shadow border border-white/20 hover:shadow-lg transition-all duration-300 hover:scale-105 text-center"
              >
                <div className="text-sm font-medium text-gray-800">{slot}</div>
                <div className="text-xs text-green-600">Available</div>
              </button>
            ))}
          </div>
        </div>
      )}

      {/* Step 5: Confirm Booking */}
      {step === "confirm" && (
        <div className="max-w-2xl mx-auto">
          <div className="bg-white/80 backdrop-blur-sm rounded-2xl shadow-xl p-8 border border-white/20">
            <h3 className="text-xl font-semibold text-gray-800 mb-6 text-center">
              {getConsultationText("confirmBooking")}
            </h3>

            <div className="space-y-4">
              <div className="flex justify-between">
                <span className="text-gray-600">{getConsultationText("specialty")}:</span>
                <span className="font-medium">
                  {selectedSpecialtyData?.name}
                </span>
              </div>
              <div className="flex justify-between">
                <span className="text-gray-600">{getConsultationText("consultationType")}:</span>
                <span className="font-medium flex items-center">
                  {consultationType === "video" ? getConsultationText("videoCall") : getConsultationText("chat")}
                </span>
              </div>
              <div className="flex justify-between">
                <span className="text-gray-600">{getConsultationText("doctor")}:</span>
                <span className="font-medium">
                  {doctors.find((d) => d.id === selectedDoctor)?.name}
                </span>
              </div>
              <div className="flex justify-between">
                <span className="text-gray-600">{getConsultationText("time")}:</span>
                <span className="font-medium">{selectedTimeSlot}</span>
              </div>
            </div>

            <div className="mt-8 flex space-x-4">
              <button
                onClick={() => setStep("time")}
                className="flex-1 bg-gray-200 hover:bg-gray-300 text-gray-800 py-3 rounded-lg transition-colors"
              >
                {getConsultationText("back")}
              </button>
              <button
                onClick={handleBooking}
                className="flex-1 bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700 text-white py-3 rounded-lg transition-all duration-300"
              >
                {getConsultationText("confirm")}
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
