import { useState } from 'react';
import { useLanguage } from '../contexts/LanguageContext';

interface VoiceAssistantProps {
  userName?: string;
  onCommand?: (command: string, language: string) => void;
}

export default function VoiceAssistant({ userName = "Rajesh", on  // Process voice commands with enhanced multilingual responses
  const processVoiceCommand = (command: string) => {
    const lowerCommand = command.toLowerCase();
    let responseText = '';
    let navigationSection = '';

    console.log(`Processing voice command: "${command}" in ${currentLanguage}`);

    // Command processing in multiple languages with proper responses
    if (lowerCommand.includes('appointment') || lowerCommand.includes('book') || 
        lowerCommand.includes('рдЕрдкреЙрдЗрдВрдЯрдореЗрдВрдЯ') || lowerCommand.includes('рдмреБрдХ') ||
        lowerCommand.includes('роЪроирпНродро┐рокрпНрокрпБ') || lowerCommand.includes('роорпБройрпНрокродро┐ро╡рпБ')) {
      
      if (currentLanguage === 'hindi') {
        responseText = 'рдЕрдкреЙрдЗрдВрдЯрдореЗрдВрдЯ рдмреБрдХрд┐рдВрдЧ рдЦреЛрд▓ рд░рд╣рд╛ рд╣реВрдВред';
      } else if (currentLanguage === 'tamil') {
        responseText = 'роЕрокрпНрокро╛ропро┐ройрпНроЯрпНроорпЖройрпНроЯрпН рдмреБрдХрд┐рдВрдЧ рддрд┐рд░реИрдХреНрдХрд┐рд░реЗрдиреНред';
      } else {
        responseText = getVoiceCommand('goToAppointments') || 'Opening appointments for you.';
      }
      navigationSection = 'appointments';
    }
    else if (lowerCommand.includes('medicine') || lowerCommand.includes('medication') ||
             lowerCommand.includes('рджрд╡рд╛') || lowerCommand.includes('рдФрд╖рдзрд┐') ||
             lowerCommand.includes('рооро░рпБроирпНродрпБ')) {
      
      if (currentLanguage === 'hindi') {
        responseText = 'рдЖрдкрдХреА рджрд╡рд╛рдЗрдпрд╛рдВ рджрд┐рдЦрд╛ рд░рд╣рд╛ рд╣реВрдВред';
      } else if (currentLanguage === 'tamil') {
        responseText = 'роЙроЩрпНроХро│рпН рооро░рпБроирпНродрпБроХро│рпИ роХро╛роЯрпНроЯрпБроХро┐ро▒рпЗройрпНред';
      } else {
        responseText = getVoiceCommand('medicationReminder') || 'Showing your medications.';
      }
      navigationSection = 'healthRecords';
    }istantProps) {
  const [isListening, setIsListening] = useState(false);
  const [transcript, setTranscript] = useState('');
  const [response, setResponse] = useState('');
  const [isInitialized, setIsInitialized] = useState(false);
  const { getVoiceCommand, currentLanguage } = useLanguage();

  // Get current time greeting
  const getTimeGreeting = () => {
    const hour = new Date().getHours();
    if (hour < 12) return 'goodMorning';
    if (hour < 17) return 'goodAfternoon';
    return 'goodEvening';
  };

  // Speak text using Web Speech API with enhanced Tamil support
  const speakText = (text: string) => {
    if ('speechSynthesis' in window) {
      // Cancel any ongoing speech
      speechSynthesis.cancel();
      
      const utterance = new SpeechSynthesisUtterance(text);
      
      // Set language based on current language with enhanced support
      const langCodes = {
        english: 'en-US',
        hindi: 'hi-IN',
        tamil: 'ta-IN',
        telugu: 'te-IN',
        bengali: 'bn-IN',
        marathi: 'mr-IN',
        punjabi: 'pa-IN'
      };
      
      const selectedLangCode = langCodes[currentLanguage as keyof typeof langCodes] || 'en-US';
      utterance.lang = selectedLangCode;
      utterance.rate = 0.8;
      utterance.pitch = 1;
      utterance.volume = 0.9;
      
      console.log(`Attempting to speak in ${currentLanguage} (${selectedLangCode}): "${text}"`);
      
      // Wait for voices to load and pick the best voice for the language
      const setVoiceAndSpeak = () => {
        const voices = speechSynthesis.getVoices();
        console.log('Available voices:', voices.map(v => `${v.name} (${v.lang})`));
        console.log(`Trying to select voice for language: ${currentLanguage} (${selectedLangCode})`);
        
        let selectedVoice = null;
        const targetLang = selectedLangCode;
        const langPrefix = targetLang.split('-')[0]; // e.g., 'ta' from 'ta-IN'
        
        // Enhanced voice selection for Tamil and other languages
        if (currentLanguage === 'tamil') {
          console.log('Searching for Tamil voices...');
          // Try to find Tamil voices with different approaches
          selectedVoice = voices.find(voice => 
            voice.lang.toLowerCase().includes('ta-in') || 
            voice.lang.toLowerCase().includes('ta_in') ||
            voice.lang.toLowerCase().startsWith('ta') ||
            voice.name.toLowerCase().includes('tamil')
          );
          
          console.log('Tamil voice found:', selectedVoice ? `${selectedVoice.name} (${selectedVoice.lang})` : 'None');
          
          // Fallback to any Indian English voice if no Tamil voice found
          if (!selectedVoice) {
            console.log('No Tamil voice found, trying Indian English...');
            selectedVoice = voices.find(voice => 
              voice.lang.includes('en-IN') || 
              voice.name.toLowerCase().includes('indian')
            );
            console.log('Indian English voice found:', selectedVoice ? `${selectedVoice.name} (${selectedVoice.lang})` : 'None');
          }
          
          // Ultimate fallback to any English voice
          if (!selectedVoice) {
            console.log('No Indian English found, trying any English voice...');
            selectedVoice = voices.find(voice => 
              voice.lang.startsWith('en-') ||
              voice.lang.toLowerCase().includes('english')
            );
            console.log('English voice found:', selectedVoice ? `${selectedVoice.name} (${selectedVoice.lang})` : 'None');
          }
        } else if (currentLanguage === 'hindi') {
          selectedVoice = voices.find(voice => 
            voice.lang.toLowerCase().includes('hi-in') || 
            voice.lang.toLowerCase().includes('hi_in') ||
            voice.lang.toLowerCase().startsWith('hi') ||
            voice.name.toLowerCase().includes('hindi')
          );
        } else {
          // For other languages, try exact match first, then prefix match
          selectedVoice = voices.find(voice => voice.lang === targetLang) ||
                         voices.find(voice => voice.lang.startsWith(langPrefix));
        }
        
        if (selectedVoice) {
          utterance.voice = selectedVoice;
          console.log(`тЬЕ Selected voice: ${selectedVoice.name} (${selectedVoice.lang}) for ${currentLanguage}`);
        } else {
          console.log(`тЪая╕П No specific voice found for ${currentLanguage}, using default`);
        }
        
        // Add error handling for speech synthesis
        utterance.onerror = (event) => {
          console.error('Speech synthesis error:', event);
          // Try fallback with English if original language fails
          if (selectedLangCode !== 'en-US') {
            console.log('Retrying with English...');
            const fallbackUtterance = new SpeechSynthesisUtterance(text);
            fallbackUtterance.lang = 'en-US';
            fallbackUtterance.rate = 0.8;
            speechSynthesis.speak(fallbackUtterance);
          }
        };
        
        utterance.onstart = () => {
          console.log(`ЁЯЧгя╕П Speaking: "${text}" in ${currentLanguage}`);
        };
        
        utterance.onend = () => {
          console.log(`тЬЕ Finished speaking in ${currentLanguage}`);
        };
        
        console.log(`Speaking in ${selectedLangCode}:`, text);
        speechSynthesis.speak(utterance);
      };
      
      // If voices are already loaded, use them immediately
      if (speechSynthesis.getVoices().length > 0) {
        setVoiceAndSpeak();
      } else {
        // Wait for voices to load
        speechSynthesis.addEventListener('voiceschanged', setVoiceAndSpeak, { once: true });
        
        // Fallback timeout in case voiceschanged never fires
        setTimeout(() => {
          if (speechSynthesis.getVoices().length > 0) {
            setVoiceAndSpeak();
          }
        }, 100);
      }
    }
  };

  // Generate personalized greeting
  const generateGreeting = () => {
    const timeGreeting = getTimeGreeting();
    const greetingTexts = {
      english: {
        goodMorning: `Good morning ${userName}! I'm your EasyMed AI assistant. How can I help you with your health today?`,
        goodAfternoon: `Good afternoon ${userName}! I'm here to assist you with any health questions or concerns.`,
        goodEvening: `Good evening ${userName}! How are you feeling today? I'm here to help with your health needs.`
      },
      hindi: {
        goodMorning: `рд╕реБрдкреНрд░рднрд╛рдд ${userName}! рдореИрдВ рдЖрдкрдХрд╛ EasyMed AI рд╕рд╣рд╛рдпрдХ рд╣реВрдВред рдЖрдЬ рдореИрдВ рдЖрдкрдХреА рд╕реНрд╡рд╛рд╕реНрдереНрдп рдореЗрдВ рдХреИрд╕реЗ рдорджрдж рдХрд░ рд╕рдХрддрд╛ рд╣реВрдВ?`,
        goodAfternoon: `рдирдорд╕реНрдХрд╛рд░ ${userName}! рдореИрдВ рдЖрдкрдХреЗ рдХрд┐рд╕реА рднреА рд╕реНрд╡рд╛рд╕реНрдереНрдп рдкреНрд░рд╢реНрди рдпрд╛ рдЪрд┐рдВрддрд╛ рдореЗрдВ рд╕рд╣рд╛рдпрддрд╛ рдХреЗ рд▓рд┐рдП рдпрд╣рд╛рдВ рд╣реВрдВред`,
        goodEvening: `рд╢реБрдн рд╕рдВрдзреНрдпрд╛ ${userName}! рдЖрдЬ рдЖрдк рдХреИрд╕рд╛ рдорд╣рд╕реВрд╕ рдХрд░ рд░рд╣реЗ рд╣реИрдВ? рдореИрдВ рдЖрдкрдХреА рд╕реНрд╡рд╛рд╕реНрдереНрдп рдЖрд╡рд╢реНрдпрдХрддрд╛рдУрдВ рдореЗрдВ рдорджрдж рдХреЗ рд▓рд┐рдП рдпрд╣рд╛рдВ рд╣реВрдВред`
      },
      tamil: {
        goodMorning: `роХро╛ро▓рпИ ро╡рогроХрпНроХроорпН ${userName}! роиро╛ройрпН роЙроЩрпНроХро│рпН EasyMed AI роЙродро╡ро┐ропро╛ро│ро░рпН. роЗройрпНро▒рпБ роЙроЩрпНроХро│рпН роЪрпБроХро╛родро╛ро░родрпНродро┐ро▓рпН роиро╛ройрпН роОрокрпНрокроЯро┐ роЙродро╡ роорпБроЯро┐ропрпБроорпН?`,
        goodAfternoon: `роородро┐ропроорпН ро╡рогроХрпНроХроорпН ${userName}! роЙроЩрпНроХро│рпН роОроирпНрод роЪрпБроХро╛родро╛ро░ роХрпЗро│рпНро╡ро┐роХро│рпН роЕро▓рпНро▓родрпБ роХро╡ро▓рпИроХро│ро┐ро▓рпБроорпН роЙродро╡ роиро╛ройрпН роЗроЩрпНроХрпЗ роЗро░рпБроХрпНроХро┐ро▒рпЗройрпН.`,
        goodEvening: `рооро╛ро▓рпИ ро╡рогроХрпНроХроорпН ${userName}! роЗройрпНро▒рпБ роирпАроЩрпНроХро│рпН роОрокрпНрокроЯро┐ роЙрогро░рпНроХро┐ро▒рпАро░рпНроХро│рпН? роЙроЩрпНроХро│рпН роЪрпБроХро╛родро╛ро░ родрпЗро╡рпИроХро│ро┐ро▓рпН роЙродро╡ роиро╛ройрпН роЗроЩрпНроХрпЗ роЗро░рпБроХрпНроХро┐ро▒рпЗройрпН.`
      },
      telugu: {
        goodMorning: `р░╢р▒Бр░нр▒Лр░жр░пр░В ${userName}! р░ир▒Зр░ир▒Б р░ор▒А EasyMed AI р░╕р░╣р░╛р░пр░Хр▒Бр░бр░┐р░ир░┐. р░Ир░░р▒Лр░Ьр▒Б р░ор▒А р░Жр░░р▒Лр░Чр▒Нр░пр░Вр░▓р▒Л р░ир▒Зр░ир▒Б р░Ор░▓р░╛ р░╕р░╣р░╛р░пр░В р░Ър▒Зр░пр░Чр░▓р░ир▒Б?`,
        goodAfternoon: `р░ир░ор░╕р▒Нр░Хр░╛р░░р░В ${userName}! р░ор▒А р░Пр░╡р▒Ир░ир░╛ р░Жр░░р▒Лр░Чр▒Нр░п р░кр▒Нр░░р░╢р▒Нр░ир░▓р▒Б р░▓р▒Зр░жр░╛ р░Жр░Вр░жр▒Лр░│р░ир░▓р░▓р▒Л р░╕р░╣р░╛р░пр░В р░Ър▒Зр░пр░бр░╛р░ир░┐р░Хр░┐ р░ир▒Зр░ир▒Б р░Зр░Хр▒Нр░Хр░б р░Йр░ир▒Нр░ир░╛р░ир▒Б.`,
        goodEvening: `р░╢р▒Бр░н р░╕р░╛р░пр░Вр░др▒Нр░░р░В ${userName}! р░Ир░░р▒Лр░Ьр▒Б р░ор▒Ар░░р▒Б р░Ор░▓р░╛ р░Ер░ир▒Бр░нр░╡р░┐р░╕р▒Нр░др▒Бр░ир▒Нр░ир░╛р░░р▒Б? р░ор▒А р░Жр░░р▒Лр░Чр▒Нр░п р░Ер░╡р░╕р░░р░╛р░▓р░▓р▒Л р░╕р░╣р░╛р░пр░В р░Ър▒Зр░пр░бр░╛р░ир░┐р░Хр░┐ р░ир▒Зр░ир▒Б р░Зр░Хр▒Нр░Хр░б р░Йр░ир▒Нр░ир░╛р░ир▒Б.`
      },
      bengali: {
        goodMorning: `рж╕рзБржкрзНрж░ржнрж╛ржд ${userName}! ржЖржорж┐ ржЖржкржирж╛рж░ EasyMed AI рж╕рж╣рж╛ржпрж╝ржХред ржЖржЬ ржЖржорж┐ ржЖржкржирж╛рж░ рж╕рзНржмрж╛рж╕рзНржерзНржпрзЗрж░ ржмрзНржпрж╛ржкрж╛рж░рзЗ ржХрзАржнрж╛ржмрзЗ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░рждрзЗ ржкрж╛рж░рж┐?`,
        goodAfternoon: `ржиржорж╕рзНржХрж╛рж░ ${userName}! ржЖржкржирж╛рж░ ржпрзЗржХрзЛржирзЛ рж╕рзНржмрж╛рж╕рзНржерзНржп ржкрзНрж░рж╢рзНржи ржмрж╛ ржЙржжрзНржмрзЗржЧрзЗрж░ ржЬржирзНржп ржЖржорж┐ ржПржЦрж╛ржирзЗ ржЖржЫрж┐ред`,
        goodEvening: `рж╢рзБржн рж╕ржирзНржзрзНржпрж╛ ${userName}! ржЖржЬ ржЖржкржирж┐ ржХрзЗржоржи ржЕржирзБржнржм ржХрж░ржЫрзЗржи? ржЖржкржирж╛рж░ рж╕рзНржмрж╛рж╕рзНржерзНржп ржкрзНрж░ржпрж╝рзЛржЬржирзЗ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░рждрзЗ ржЖржорж┐ ржПржЦрж╛ржирзЗ ржЖржЫрж┐ред`
      },
      marathi: {
        goodMorning: `рд╕реБрдкреНрд░рднрд╛рдд ${userName}! рдореА рддреБрдордЪрд╛ EasyMed AI рд╕рд╣рд╛рдпреНрдпрдХ рдЖрд╣реЗред рдЖрдЬ рдореА рддреБрдордЪреНрдпрд╛ рдЖрд░реЛрдЧреНрдпрд╛рдд рдХрд╢реА рдорджрдд рдХрд░реВ рд╢рдХрддреЛ?`,
        goodAfternoon: `рдирдорд╕реНрдХрд╛рд░ ${userName}! рддреБрдордЪреНрдпрд╛ рдХреЛрдгрддреНрдпрд╛рд╣реА рдЖрд░реЛрдЧреНрдп рдкреНрд░рд╢реНрдирд╛рдВрд╕рд╛рдареА рдХрд┐рдВрд╡рд╛ рдЪрд┐рдВрддреЗрд╕рд╛рдареА рдореА рдпреЗрдереЗ рдЖрд╣реЗред`,
        goodEvening: `рд╢реБрдн рд╕рдВрдзреНрдпрд╛рдХрд╛рд│ ${userName}! рдЖрдЬ рддреБрдореНрд╣реА рдХрд╕реЗ рд╡рд╛рдЯрдд рдЖрд╣рд╛рдд? рддреБрдордЪреНрдпрд╛ рдЖрд░реЛрдЧреНрдп рдЧрд░рдЬрд╛рдВрдордзреНрдпреЗ рдорджрдд рдХрд░рдгреНрдпрд╛рд╕рд╛рдареА рдореА рдпреЗрдереЗ рдЖрд╣реЗред`
      },
      punjabi: {
        goodMorning: `ри╕рид ри╕рйНри░рйА риЕриХри╛ри▓ ${userName}! риорйИриВ ридрйБри╣ри╛рибри╛ EasyMed AI ри╕ри╣ри╛риЗриХ ри╣ри╛риВред риЕрй▒риЬ риорйИриВ ридрйБри╣ри╛рибрйА ри╕ри┐ри╣рид ри╡ри┐рй▒риЪ риХри┐ри╡рйЗриВ риорижриж риХри░ ри╕риХрижри╛ ри╣ри╛риВ?`,
        goodAfternoon: `ри╕рид ри╕рйНри░рйА риЕриХри╛ри▓ ${userName}! ридрйБри╣ри╛рибрйЗ риХри┐ри╕рйЗ ри╡рйА ри╕ри┐ри╣рид ри╕римрй░ризрйА ри╕ри╡ри╛ри▓ риЬри╛риВ риЪри┐рй░ридри╛ ри▓риИ риорйИриВ риЗрй▒риерйЗ ри╣ри╛риВред`,
        goodEvening: `ри╕ри╝рйБрин ри╕ри╝ри╛рио ${userName}! риЕрй▒риЬ ридрйБри╕рйАриВ риХри┐ри╡рйЗриВ риори╣ри┐ри╕рйВри╕ риХри░ ри░ри╣рйЗ ри╣рйЛ? ридрйБри╣ри╛рибрйАриЖриВ ри╕ри┐ри╣рид ри▓рйЛрйЬри╛риВ ри╡ри┐рй▒риЪ риорижриж риХри░рии ри▓риИ риорйИриВ риЗрй▒риерйЗ ри╣ри╛риВред`
      }
    };
    
    const langGreetings = greetingTexts[currentLanguage as keyof typeof greetingTexts] || greetingTexts.english;
    return langGreetings[timeGreeting as keyof typeof langGreetings];
  };

  // Start voice recognition with enhanced multilingual support
  const startVoiceRecognition = () => {
    if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {
      const SpeechRecognition = (window as any).webkitSpeechRecognition || (window as any).SpeechRecognition;
      const recognition = new SpeechRecognition();
      
      recognition.continuous = false;
      recognition.interimResults = true;
      recognition.maxAlternatives = 3;
      
      // Set language for recognition with fallback
      const langCodes = {
        english: 'en-US',
        hindi: 'hi-IN',
        tamil: 'ta-IN',
        telugu: 'te-IN',
        bengali: 'bn-IN',
        marathi: 'mr-IN',
        punjabi: 'pa-IN'
      };
      
      const selectedLang = langCodes[currentLanguage as keyof typeof langCodes] || 'en-US';
      recognition.lang = selectedLang;
      
      console.log(`Voice recognition started in ${currentLanguage} (${selectedLang})`);
      
      recognition.onstart = () => {
        setIsListening(true);
        setTranscript('');
        
        const startMsg = currentLanguage === 'hindi' ? 'рд╕реБрди рд░рд╣рд╛ рд╣реВрдВ...' :
                        currentLanguage === 'tamil' ? 'роХрпЗрдЯрзНржЯрзБржХрзЛржирзНржбрж┐рж░рзБржХрзНржХрзЗржирзН...' :
                        'Listening...';
        setResponse(startMsg);
      };
      
      recognition.onresult = (event: any) => {
        let finalTranscript = '';
        let interimTranscript = '';
        
        for (let i = event.resultIndex; i < event.results.length; i++) {
          const transcript = event.results[i][0].transcript;
          if (event.results[i].isFinal) {
            finalTranscript += transcript;
          } else {
            interimTranscript += transcript;
          }
        }
        
        const currentTranscript = finalTranscript || interimTranscript;
        setTranscript(currentTranscript);
        
        if (finalTranscript) {
          console.log(`Voice command received: "${finalTranscript}" in ${currentLanguage}`);
          processVoiceCommand(finalTranscript);
        }
      };
      
      recognition.onerror = (event: any) => {
        console.error('Speech recognition error:', event.error);
        setIsListening(false);
        
        const errorMsg = currentLanguage === 'hindi' ? 'рдорд╛рдл рдХрд░реЗрдВ, рдореИрдВ рд╕рдордЭ рдирд╣реАрдВ рдкрд╛рдпрд╛ред рдХреГрдкрдпрд╛ рджреЛрдмрд╛рд░рд╛ рдХреЛрд╢рд┐рд╢ рдХрд░реЗрдВред' :
                        currentLanguage === 'tamil' ? 'ржорж╛ржлреН ржХрж░рзБржЩрзНржЧрж▓рзН, ржПржиржХрзНржХрзБ ржкрзБрж░рж┐ржпрж╝ржмрж┐рж▓рзНрж▓рзИред ржорзАрдгрзНрдбрзБржореН рж╕рзЛрж▓рзНрж▓рзБржЩрзНржЧрж▓рзНред' :
                        'Sorry, I couldn\'t understand that. Please try again.';
        setResponse(errorMsg);
        speakText(errorMsg);
      };
      
      recognition.onend = () => {
        setIsListening(false);
      };
      
      recognition.start();
    } else {
      const notSupportedMsg = currentLanguage === 'hindi' ? 'рдЖрд╡рд╛рдЬ рдкрд╣рдЪрд╛рди рдЗрд╕ рдмреНрд░рд╛рдЙрдЬрд╝рд░ рдореЗрдВ рд╕рдорд░реНрдерд┐рдд рдирд╣реАрдВ рд╣реИред' :
                             currentLanguage === 'tamil' ? 'ржХрзБрж░рж▓реН ржкрзБрж░рж┐ржирзНрждрж▓реН ржЗ ржмрзНрж░рж╛ржЙржЬрж░рж┐рж▓реН ржЕрдиреБржорждрж┐ рдЗрд▓рзНрж▓рзИред' :
                             'Voice recognition is not supported in this browser.';
      alert(notSupportedMsg);
    }
  };

  // Process voice commands
  const processVoiceCommand = (command: string) => {
    const lowerCommand = command.toLowerCase();
    let responseText = '';
    let navigationSection = '';

    // Command processing in multiple languages
    if (lowerCommand.includes('appointment') || lowerCommand.includes('book') || 
        lowerCommand.includes('рдЕрдкреЙрдЗрдВрдЯрдореЗрдВрдЯ') || lowerCommand.includes('рдмреБрдХ') ||
        lowerCommand.includes('роЪроирпНродро┐рокрпНрокрпБ') || lowerCommand.includes('роорпБройрпНрокродро┐ро╡рпБ')) {
      responseText = getVoiceCommand('goToAppointments') || 'Opening appointments for you.';
      navigationSection = 'appointments';
    }
    else if (lowerCommand.includes('medicine') || lowerCommand.includes('medication') ||
             lowerCommand.includes('рджрд╡рд╛') || lowerCommand.includes('рдФрд╖рдзрд┐') ||
             lowerCommand.includes('рооро░рпБроирпНродрпБ')) {
      responseText = getVoiceCommand('medicationReminder') || 'Showing your medications.';
      navigationSection = 'healthRecords';
    }
    else if (lowerCommand.includes('emergency') || lowerCommand.includes('help') ||
             lowerCommand.includes('рдЖрдкрд╛рддрдХрд╛рд▓') || lowerCommand.includes('рдорджрдж') ||
             lowerCommand.includes('роЕро╡роЪро░роорпН') || lowerCommand.includes('роЙродро╡ро┐')) {
      responseText = getVoiceCommand('emergency') || 'Connecting you to emergency services.';
      navigationSection = 'emergency';
    }
    else if (lowerCommand.includes('vitals') || lowerCommand.includes('health') ||
             lowerCommand.includes('рд╡рд╛рдЗрдЯрд▓') || lowerCommand.includes('рд╕реНрд╡рд╛рд╕реНрдереНрдп') ||
             lowerCommand.includes('роЙропро┐ро░рпНроЪрпНроЪрдХрпНродро┐') || lowerCommand.includes('роЪрпБроХро╛родро╛ро░роорпН')) {
      responseText = 'Opening your health vitals.';
      navigationSection = 'vitalsMonitoring';
    }
    else if (lowerCommand.includes('family') || lowerCommand.includes('рдкрд░рд┐рд╡рд╛рд░') || lowerCommand.includes('роХрпБроЯрпБроорпНрокроорпН')) {
      responseText = getVoiceCommand('familyHealthNav') || 'Showing family health overview.';
      navigationSection = 'familyHealth';
    }
    else if (lowerCommand.includes('chat') || lowerCommand.includes('ai') || 
             lowerCommand.includes('рдЪреИрдЯ') || lowerCommand.includes('рдПрдЖрдИ') ||
             lowerCommand.includes('роЕро░роЯрпНроЯрпИ') || lowerCommand.includes('роЪрпЖропро▒рпНроХрпИ роирпБрогрпНрогро▒ро┐ро╡рпБ')) {
      responseText = 'Opening AI chat assistant.';
      navigationSection = 'aiChat';
    }
    else if (lowerCommand.includes('dashboard') || lowerCommand.includes('home') ||
             lowerCommand.includes('рдбреИрд╢рдмреЛрд░реНрдб') || lowerCommand.includes('рд╣реЛрдо') ||
             lowerCommand.includes('роорпБроХрокрпНрокрпБ')) {
      responseText = 'Going to dashboard.';
      navigationSection = 'dashboard';
    }
    else if (lowerCommand.includes('education') || lowerCommand.includes('learn') ||
             lowerCommand.includes('рд╢рд┐рдХреНрд╖рд╛') || lowerCommand.includes('рд╕реАрдЦреЗрдВ') ||
             lowerCommand.includes('роХро▓рпНро╡ро┐')) {
      responseText = 'Opening health education.';
      navigationSection = 'education';
    }
    else if (lowerCommand.includes('asha') || lowerCommand.includes('worker') ||
             lowerCommand.includes('рдЖрд╢рд╛') || lowerCommand.includes('рд╡рд░реНрдХрд░')) {
      responseText = 'Opening ASHA worker hub.';
      navigationSection = 'ashaWorker';
    }
    else {
      // Enhanced multilingual default responses
      const defaultResponses = {
        english: `I heard "${command}" but didn't understand completely. Try saying "emergency", "book appointment", "check medicine", "family health", "check vitals", or "open chat".`,
        hindi: `рдореИрдВрдиреЗ "${command}" рд╕реБрдирд╛ рд▓реЗрдХрд┐рди рдкреВрд░реА рддрд░рд╣ рд╕рдордЭ рдирд╣реАрдВ рдкрд╛рдпрд╛ред "рдЖрдкрд╛рддрдХрд╛рд▓", "рдЕрдкреЙрдЗрдВрдЯрдореЗрдВрдЯ рдмреБрдХ рдХрд░реЗрдВ", "рджрд╡рд╛рдИ рдЪреЗрдХ рдХрд░реЗрдВ", "рдкрд╛рд░рд┐рд╡рд╛рд░рд┐рдХ рд╕реНрд╡рд╛рд╕реНрдереНрдп", "рд╡рд╛рдЗрдЯрд▓реНрд╕ рдЪреЗрдХ рдХрд░реЗрдВ", рдпрд╛ "рдЪреИрдЯ рдЦреЛрд▓реЗрдВ" рдХрд╣рдиреЗ рдХреА рдХреЛрд╢рд┐рд╢ рдХрд░реЗрдВред`,
        tamil: `роиро╛ройрпН "${command}" роХрпЗроЯрпНроЯрпЗройрпН роЖройро╛ро▓рпН роорпБро┤рпБроорпИропро╛роХ рокрпБро░ро┐ропро╡ро┐ро▓рпНро▓рпИред "роЕро╡роЪро░роорпН", "роЕрокрпНрокро╛ропро┐ройрпНроорпЖройрпНроЯрпН рокрпБроХрпН", "рооро░рпБроирпНродрпБ роЪро░ро┐рокро╛ро░рпНроХрпНроХ", "роХрпБроЯрпБроорпНрок роЖро░рпЛроХрпНроХро┐ропроорпН", "роЙропро┐ро░рпНроЪрпНроЪроХрпНродро┐ роЪро░ро┐рокро╛ро░рпНроХрпНроХ", роЕро▓рпНро▓родрпБ "роЕро░роЯрпНроЯрпИ родро┐ро▒" роЪрпКро▓рпНро▓ро┐ роорпБропро▒рпНроЪро┐роХрпНроХро╡рпБроорпНред`
      };
      
      responseText = defaultResponses[currentLanguage as keyof typeof defaultResponses] || defaultResponses.english;
    }

    setResponse(responseText);
    speakText(responseText);

    // Trigger navigation if command recognized and callback provided
    if (navigationSection && onCommand) {
      onCommand(navigationSection, currentLanguage);
    }
  };

  const handleVoiceCommand = () => {
    if (!isInitialized) {
      // First click - give greeting
      const greeting = generateGreeting();
      setResponse(greeting);
      speakText(greeting);
      setIsInitialized(true);
    } else if (!isListening) {
      // Start listening for commands
      startVoiceRecognition();
    } else {
      // Stop listening
      setIsListening(false);
      if ('speechSynthesis' in window) {
        speechSynthesis.cancel();
      }
    }
  };

  return (
    <div className="fixed bottom-4 right-4 z-50">
      {/* Voice Assistant Dialog - Mobile Optimized */}
      {(isListening || response) && (
        <div className="mb-4 bg-white/95 backdrop-blur-sm p-3 sm:p-4 rounded-xl border border-white/20 shadow-lg max-w-[280px] sm:max-w-xs">
          {isListening && (
            <div className="flex items-center space-x-2 text-blue-600">
              <div className="w-2 h-2 bg-blue-600 rounded-full animate-pulse"></div>
              <span className="text-sm font-medium">Listening...</span>
            </div>
          )}
          {transcript && (
            <div className="mb-2">
              <p className="text-xs text-gray-600 font-medium">You said:</p>
              <p className="text-sm font-medium">{transcript}</p>
            </div>
          )}
          {response && (
            <div>
              <p className="text-xs text-gray-600 font-medium">EasyMed AI:</p>
              <p className="text-sm leading-relaxed">{response}</p>
            </div>
          )}
        </div>
      )}

      {/* Voice Button - Touch Optimized */}
      <button 
        onClick={handleVoiceCommand}
        className={`w-14 h-14 sm:w-16 sm:h-16 rounded-full shadow-lg transition-all flex items-center justify-center touch-manipulation active:scale-95 ${
          isListening 
            ? 'bg-red-600 hover:bg-red-700 animate-pulse' 
            : 'bg-blue-600 hover:bg-blue-700'
        }`}
        aria-label="Voice Assistant"
      >
        <svg className="w-7 h-7 sm:w-8 sm:h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path 
            strokeLinecap="round" 
            strokeLinejoin="round" 
            strokeWidth={2} 
            d="M19 11a7 7 0 01-7 7m0 0a7 7 0 01-7-7m7 7v4m0 0H8m4 0h4m-4-8a3 3 0 01-3-3V5a3 3 0 116 0v6a3 3 0 01-3 3z" 
          />
        </svg>
      </button>
    </div>
  );
}
