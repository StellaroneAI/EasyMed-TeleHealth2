import React, { useState, useEffect } from "react";
import { useLanguage } from "../contexts/LanguageContext";

interface Medication {
  id: string;
  name: string;
  dosage: string;
  frequency: string;
  times: string[];
  taken: { [date: string]: boolean[] };
  startDate: string;
  endDate?: string;
  prescribedBy: string;
  instructions: string;
  sideEffects: string[];
  interactions: string[];
}

interface DrugInteraction {
  severity: "mild" | "moderate" | "severe";
  description: string;
  medications: string[];
  recommendation: string;
}

interface Reminder {
  id: string;
  medicationId: string;
  time: string;
  taken: boolean;
  skipped: boolean;
  timestamp: Date;
}

export default function MedicationManager() {
  const { currentLanguage, getText } = useLanguage();
  const [medications, setMedications] = useState<Medication[]>([]);
  const [todayReminders, setTodayReminders] = useState<Reminder[]>([]);
  const [interactions, setInteractions] = useState<DrugInteraction[]>([]);
  const [activeTab, setActiveTab] = useState("today");
  const [isLoading, setIsLoading] = useState(true);
  const [adherenceScore, setAdherenceScore] = useState(0);

  // Translation texts
  const texts = {
    english: {
      smartMedicationManager: "Smart Medication Manager",
      aiPoweredMedicationTracking: "AI-powered medication tracking and interaction checking",
      adherenceScore: "Adherence Score",
      excellent: "ЁЯЯв Excellent",
      good: "ЁЯЯб Good",
      needsImprovement: "ЁЯФ┤ Needs Improvement",
      today: "Today",
      allMedications: "All Medications",
      drugInteractions: "Drug Interactions",
      history: "History",
      loadingMedicationManager: "Loading Medication Manager",
      preparingMedicationSchedule: "Preparing your medication schedule and checking for interactions...",
      todaysMedicationSchedule: "Today's Medication Schedule",
      pastDue: "Past due",
      upcoming: "Upcoming",
      scheduled: "Scheduled",
      taken: "Taken",
      skip: "Skip",
      skipped: "Skipped",
      markAsTaken: "Mark as taken",
      medicationsTakenToday: "Medications Taken Today",
      totalDosesToday: "Total Doses Today",
      activeMedications: "Active Medications",
      prescribedBy: "Prescribed by",
      dosage: "Dosage",
      frequency: "Frequency",
      times: "Times",
      startDate: "Start Date",
      instructions: "Instructions",
      commonSideEffects: "Common Side Effects",
      viewFullDetails: "View Full Details",
      drugInteractionChecker: "Drug Interaction Checker",
      interaction: "Interaction",
      recommendation: "Recommendation",
      noDrugInteractionsFound: "No Drug Interactions Found",
      medicationsAppearSafe: "Your current medications appear to be safe to take together.",
      addNewMedication: "Add New Medication",
      checkInteractionsBeforeStarting: "Check for interactions before starting a new medication",
      enterMedicationName: "Enter medication name...",
      checkInteractions: "Check Interactions",
      medicationAdherenceHistory: "Medication Adherence History",
      last30DaysAdherence: "Last 30 Days Adherence",
      sun: "Sun",
      mon: "Mon",
      tue: "Tue",
      wed: "Wed",
      thu: "Thu",
      fri: "Fri",
      sat: "Sat",
      hundredPercentAdherence: "100% adherence",
      seventyToNinetyNineAdherence: "70-99% adherence",
      belowSeventyAdherence: "Below 70% adherence",
      noMedications: "No medications",
      individualMedicationAdherence: "Individual Medication Adherence",
      dosesTaken: "doses taken",
      of: "of",
      mild: "Mild",
      moderate: "Moderate",
      severe: "Severe",
    },
    hindi: {
      smartMedicationManager: "рд╕реНрдорд╛рд░реНрдЯ рджрд╡рд╛ рдкреНрд░рдмрдВрдзрдХ",
      aiPoweredMedicationTracking: "рдПрдЖрдИ-рд╕рдВрдЪрд╛рд▓рд┐рдд рджрд╡рд╛ рдЯреНрд░реИрдХрд┐рдВрдЧ рдФрд░ рдЗрдВрдЯрд░реИрдХреНрд╢рди рдЬрд╛рдВрдЪ",
      adherenceScore: "рдкрд╛рд▓рди рд╕реНрдХреЛрд░",
      excellent: "ЁЯЯв рдЙрддреНрдХреГрд╖реНрдЯ",
      good: "ЁЯЯб рдЕрдЪреНрдЫрд╛",
      needsImprovement: "ЁЯФ┤ рд╕реБрдзрд╛рд░ рдХреА рдЖрд╡рд╢реНрдпрдХрддрд╛",
      today: "рдЖрдЬ",
      allMedications: "рд╕рднреА рджрд╡рд╛рдПрдВ",
      drugInteractions: "рджрд╡рд╛ рдЗрдВрдЯрд░реИрдХреНрд╢рди",
      history: "рдЗрддрд┐рд╣рд╛рд╕",
      loadingMedicationManager: "рджрд╡рд╛ рдкреНрд░рдмрдВрдзрдХ рд▓реЛрдб рд╣реЛ рд░рд╣рд╛ рд╣реИ",
      preparingMedicationSchedule: "рдЖрдкрдХрд╛ рджрд╡рд╛ рд╢реЗрдбреНрдпреВрд▓ рддреИрдпрд╛рд░ рдХрд┐рдпрд╛ рдЬрд╛ рд░рд╣рд╛ рд╣реИ рдФрд░ рдЗрдВрдЯрд░реИрдХреНрд╢рди рдХреА рдЬрд╛рдВрдЪ рдХреА рдЬрд╛ рд░рд╣реА рд╣реИ...",
      todaysMedicationSchedule: "рдЖрдЬ рдХрд╛ рджрд╡рд╛ рд╢реЗрдбреНрдпреВрд▓",
      pastDue: "рд╕рдордп рдмреАрдд рдЧрдпрд╛",
      upcoming: "рдЖрдиреЗ рд╡рд╛рд▓рд╛",
      scheduled: "рдирд┐рд░реНрдзрд╛рд░рд┐рдд",
      taken: "рд▓рд┐рдпрд╛ рдЧрдпрд╛",
      skip: "рдЫреЛрдбрд╝реЗрдВ",
      skipped: "рдЫреЛрдбрд╝рд╛ рдЧрдпрд╛",
      markAsTaken: "рд▓рд┐рдпрд╛ рдЧрдпрд╛ рдХреЗ рд░реВрдк рдореЗрдВ рдЪрд┐рд╣реНрдирд┐рдд рдХрд░реЗрдВ",
      medicationsTakenToday: "рдЖрдЬ рд▓реА рдЧрдИ рджрд╡рд╛рдПрдВ",
      totalDosesToday: "рдЖрдЬ рдХреБрд▓ рдбреЛрдЬрд╝",
      activeMedications: "рд╕рдХреНрд░рд┐рдп рджрд╡рд╛рдПрдВ",
      prescribedBy: "рджреНрд╡рд╛рд░рд╛ рдирд┐рд░реНрдзрд╛рд░рд┐рдд",
      dosage: "рдЦреБрд░рд╛рдХ",
      frequency: "рдЖрд╡реГрддреНрддрд┐",
      times: "рд╕рдордп",
      startDate: "рдкреНрд░рд╛рд░рдВрдн рддрд┐рдерд┐",
      instructions: "рдирд┐рд░реНрджреЗрд╢",
      commonSideEffects: "рд╕рд╛рдорд╛рдиреНрдп рд╕рд╛рдЗрдб рдЗрдлреЗрдХреНрдЯреНрд╕",
      viewFullDetails: "рдкреВрд░рд╛ рд╡рд┐рд╡рд░рдг рджреЗрдЦреЗрдВ",
      drugInteractionChecker: "рджрд╡рд╛ рдЗрдВрдЯрд░реИрдХреНрд╢рди рдЪреЗрдХрд░",
      interaction: "рдЗрдВрдЯрд░реИрдХреНрд╢рди",
      recommendation: "рд╕рд┐рдлрд╛рд░рд┐рд╢",
      noDrugInteractionsFound: "рдХреЛрдИ рджрд╡рд╛ рдЗрдВрдЯрд░реИрдХреНрд╢рди рдирд╣реАрдВ рдорд┐рд▓рд╛",
      medicationsAppearSafe: "рдЖрдкрдХреА рд╡рд░реНрддрдорд╛рди рджрд╡рд╛рдПрдВ рдПрдХ рд╕рд╛рде рд▓реЗрдиреЗ рдХреЗ рд▓рд┐рдП рд╕реБрд░рдХреНрд╖рд┐рдд рдкреНрд░рддреАрдд рд╣реЛрддреА рд╣реИрдВред",
      addNewMedication: "рдирдИ рджрд╡рд╛ рдЬреЛрдбрд╝реЗрдВ",
      checkInteractionsBeforeStarting: "рдирдИ рджрд╡рд╛ рд╢реБрд░реВ рдХрд░рдиреЗ рд╕реЗ рдкрд╣рд▓реЗ рдЗрдВрдЯрд░реИрдХреНрд╢рди рдХреА рдЬрд╛рдВрдЪ рдХрд░реЗрдВ",
      enterMedicationName: "рджрд╡рд╛ рдХрд╛ рдирд╛рдо рджрд░реНрдЬ рдХрд░реЗрдВ...",
      checkInteractions: "рдЗрдВрдЯрд░реИрдХреНрд╢рди рдЬрд╛рдВрдЪреЗрдВ",
      medicationAdherenceHistory: "рджрд╡рд╛ рдкрд╛рд▓рди рдЗрддрд┐рд╣рд╛рд╕",
      last30DaysAdherence: "рдкрд┐рдЫрд▓реЗ 30 рджрд┐рдиреЛрдВ рдХрд╛ рдкрд╛рд▓рди",
      sun: "рд░рд╡рд┐",
      mon: "рд╕реЛрдо",
      tue: "рдордВрдЧрд▓",
      wed: "рдмреБрдз",
      thu: "рдЧреБрд░реБ",
      fri: "рд╢реБрдХреНрд░",
      sat: "рд╢рдирд┐",
      hundredPercentAdherence: "100% рдкрд╛рд▓рди",
      seventyToNinetyNineAdherence: "70-99% рдкрд╛рд▓рди",
      belowSeventyAdherence: "70% рд╕реЗ рдХрдо рдкрд╛рд▓рди",
      noMedications: "рдХреЛрдИ рджрд╡рд╛ рдирд╣реАрдВ",
      individualMedicationAdherence: "рд╡реНрдпрдХреНрддрд┐рдЧрдд рджрд╡рд╛ рдкрд╛рд▓рди",
      dosesTaken: "рдбреЛрдЬрд╝ рд▓рд┐рдП рдЧрдП",
      of: "рдореЗрдВ рд╕реЗ",
      mild: "рд╣рд▓реНрдХрд╛",
      moderate: "рдордзреНрдпрдо",
      severe: "рдЧрдВрднреАрд░",
    },
    tamil: {
      smartMedicationManager: "ро╕рпНрооро╛ро░рпНроЯрпН рооро░рпБроирпНродрпБ роорпЗро▓ро╛ро│ро░рпН",
      aiPoweredMedicationTracking: "AI-роЗропроЩрпНроХрпБроорпН рооро░рпБроирпНродрпБ роХрогрпНроХро╛рогро┐рокрпНрокрпБ рооро▒рпНро▒рпБроорпН роЗроЯрпИро╡ро┐ройрпИ роЪро░ро┐рокро╛ро░рпНрокрпНрокрпБ",
      adherenceScore: "роХроЯрпИрокро┐роЯро┐рокрпНрокрпБ роородро┐рокрпНрокрпЖрогрпН",
      excellent: "ЁЯЯв роЪро┐ро▒роирпНрод",
      good: "ЁЯЯб роиро▓рпНро▓",
      needsImprovement: "ЁЯФ┤ роорпЗроорпНрокро╛роЯрпБ родрпЗро╡рпИ",
      today: "роЗройрпНро▒рпБ",
      allMedications: "роЕройрпИродрпНродрпБ рооро░рпБроирпНродрпБроХро│рпН",
      drugInteractions: "рооро░рпБроирпНродрпБ роЗроЯрпИро╡ро┐ройрпИроХро│рпН",
      history: "ро╡ро░ро▓ро╛ро▒рпБ",
      loadingMedicationManager: "рооро░рпБроирпНродрпБ роорпЗро▓ро╛ро│ро░рпН роПро▒рпНро▒рокрпНрокроЯрпБроХро┐ро▒родрпБ",
      preparingMedicationSchedule: "роЙроЩрпНроХро│рпН рооро░рпБроирпНродрпБ роЕроЯрпНроЯро╡рогрпИ родропро╛ро░ро┐роХрпНроХрокрпНрокроЯрпНроЯрпБ роЗроЯрпИро╡ро┐ройрпИроХро│рпН роЪро░ро┐рокро╛ро░рпНроХрпНроХрокрпНрокроЯрпБроХро┐ро▒родрпБ...",
      todaysMedicationSchedule: "роЗройрпНро▒рпИроп рооро░рпБроирпНродрпБ роЕроЯрпНроЯро╡рогрпИ",
      pastDue: "роХро╛ро▓ роЕро╡роХро╛роЪроорпН роХроЯроирпНродродрпБ",
      upcoming: "ро╡ро░ро╡ро┐ро░рпБроХрпНроХрпБроорпН",
      scheduled: "родро┐роЯрпНроЯрооро┐роЯрокрпНрокроЯрпНроЯ",
      taken: "роОроЯрпБродрпНродрпБроХрпНроХрпКро│рпНро│рокрпНрокроЯрпНроЯродрпБ",
      skip: "родро╡ро┐ро░рпНроХрпНроХро╡рпБроорпН",
      skipped: "родро╡ро┐ро░рпНроХрпНроХрокрпНрокроЯрпНроЯродрпБ",
      markAsTaken: "роОроЯрпБродрпНродрпБроХрпНроХрпКрогрпНроЯродро╛роХ роХрпБро▒ро┐роХрпНроХро╡рпБроорпН",
      medicationsTakenToday: "роЗройрпНро▒рпБ роОроЯрпБродрпНродрпБроХрпНроХрпКрогрпНроЯ рооро░рпБроирпНродрпБроХро│рпН",
      totalDosesToday: "роЗройрпНро▒рпБ роорпКродрпНрод роЕро│ро╡рпБроХро│рпН",
      activeMedications: "роЪрпЖропро▓ро┐ро▓рпН роЙро│рпНро│ рооро░рпБроирпНродрпБроХро│рпН",
      prescribedBy: "рокро░ро┐роирпНродрпБро░рпИродрпНродро╡ро░рпН",
      dosage: "роЕро│ро╡рпБ",
      frequency: "роЕродро┐ро░рпНро╡рпЖрогрпН",
      times: "роирпЗро░роЩрпНроХро│рпН",
      startDate: "родрпКроЯроХрпНроХ родрпЗродро┐",
      instructions: "роЕро▒ро┐ро╡рпБро░рпИроХро│рпН",
      commonSideEffects: "рокрпКродрпБро╡ро╛рой рокроХрпНроХ ро╡ро┐ро│рпИро╡рпБроХро│рпН",
      viewFullDetails: "роорпБро┤рпБ ро╡ро┐ро╡ро░роЩрпНроХро│рпИрокрпН рокро╛ро░рпНроХрпНроХро╡рпБроорпН",
      drugInteractionChecker: "рооро░рпБроирпНродрпБ роЗроЯрпИро╡ро┐ройрпИ роЪро░ро┐рокро╛ро░рпНрокрпНрокро╛ро│ро░рпН",
      interaction: "роЗроЯрпИро╡ро┐ройрпИ",
      recommendation: "рокро░ро┐роирпНродрпБро░рпИ",
      noDrugInteractionsFound: "рооро░рпБроирпНродрпБ роЗроЯрпИро╡ро┐ройрпИроХро│рпН роОродрпБро╡рпБроорпН роХрогрпНроЯро▒ро┐ропрокрпНрокроЯро╡ро┐ро▓рпНро▓рпИ",
      medicationsAppearSafe: "роЙроЩрпНроХро│рпН родро▒рпНрокрпЛродрпИроп рооро░рпБроирпНродрпБроХро│рпН роТройрпНро▒ро╛роХ роОроЯрпБродрпНродрпБроХрпНроХрпКро│рпНро│ рокро╛родрпБроХро╛рокрпНрокро╛ройродро╛роХ родрпЛройрпНро▒рпБроХро┐ройрпНро▒ройред",
      addNewMedication: "рокрпБродро┐роп рооро░рпБроирпНродрпБ роЪрпЗро░рпНроХрпНроХро╡рпБроорпН",
      checkInteractionsBeforeStarting: "рокрпБродро┐роп рооро░рпБроирпНродрпИродрпН родрпКроЯроЩрпНроХрпБро╡родро▒рпНроХрпБ роорпБройрпН роЗроЯрпИро╡ро┐ройрпИроХро│рпИроЪрпН роЪро░ро┐рокро╛ро░рпНроХрпНроХро╡рпБроорпН",
      enterMedicationName: "рооро░рпБроирпНродро┐ройрпН рокрпЖропро░рпИ роЙро│рпНро│ро┐роЯро╡рпБроорпН...",
      checkInteractions: "роЗроЯрпИро╡ро┐ройрпИроХро│рпИроЪрпН роЪро░ро┐рокро╛ро░рпНроХрпНроХро╡рпБроорпН",
      medicationAdherenceHistory: "рооро░рпБроирпНродрпБ роХроЯрпИрокро┐роЯро┐рокрпНрокрпБ ро╡ро░ро▓ро╛ро▒рпБ",
      last30DaysAdherence: "роХроЯроирпНрод 30 роиро╛роЯрпНроХро│рпН роХроЯрпИрокро┐роЯро┐рокрпНрокрпБ",
      sun: "роЮро╛ропро┐ро▒рпБ",
      mon: "родро┐роЩрпНроХро│рпН",
      tue: "роЪрпЖро╡рпНро╡ро╛ропрпН",
      wed: "рокрпБродройрпН",
      thu: "ро╡ро┐ропро╛ро┤ройрпН",
      fri: "ро╡рпЖро│рпНро│ро┐",
      sat: "роЪройро┐",
      hundredPercentAdherence: "100% роХроЯрпИрокро┐роЯро┐рокрпНрокрпБ",
      seventyToNinetyNineAdherence: "70-99% роХроЯрпИрокро┐роЯро┐рокрпНрокрпБ",
      belowSeventyAdherence: "70% роХрпНроХрпБроорпН роХрпБро▒рпИро╡ро╛рой роХроЯрпИрокро┐роЯро┐рокрпНрокрпБ",
      noMedications: "рооро░рпБроирпНродрпБроХро│рпН роЗро▓рпНро▓рпИ",
      individualMedicationAdherence: "родройро┐рокрпНрокроЯрпНроЯ рооро░рпБроирпНродрпБ роХроЯрпИрокро┐роЯро┐рокрпНрокрпБ",
      dosesTaken: "роЕро│ро╡рпБроХро│рпН роОроЯрпБроХрпНроХрокрпНрокроЯрпНроЯрой",
      of: "роЗро▓рпН",
      mild: "рооро┐родрооро╛рой",
      moderate: "роироЯрпБродрпНродро░",
      severe: "роХроЯрпБроорпИропро╛рой",
    },
    telugu: {
      smartMedicationManager: "р░╕р▒Нр░ор░╛р░░р▒Нр░Яр▒Н р░ор▒Жр░бр░┐р░Хр▒Зр░╖р░ир▒Н р░ор▒Зр░ир▒Зр░Ьр░░р▒Н",
      aiPoweredMedicationTracking: "AI-р░╢р░Хр▒Нр░др░┐р░др▒Л р░Хр▒Вр░бр░┐р░и р░ор░Вр░жр▒Бр░▓ р░Яр▒Нр░░р░╛р░Хр░┐р░Вр░Чр▒Н р░ор░░р░┐р░пр▒Б р░Зр░Вр░Яр░░р░╛р░Хр▒Нр░╖р░ир▒Н р░Ър▒Жр░Хр░┐р░Вр░Чр▒Н",
      adherenceScore: "р░Хр░Яр▒Нр░Яр▒Бр░мр░╛р░Яр▒Б р░╕р▒Нр░Хр▒Лр░░р▒Н",
      excellent: "ЁЯЯв р░Ер░жр▒Нр░нр▒Бр░др░ор▒Ир░и",
      good: "ЁЯЯб р░ор░Вр░Ър░┐",
      needsImprovement: "ЁЯФ┤ р░ор▒Жр░░р▒Бр░Чр▒Бр░жр░▓ р░Ер░╡р░╕р░░р░В",
      today: "р░Ир░░р▒Лр░Ьр▒Б",
      allMedications: "р░Ер░ир▒Нр░ир░┐ р░ор░Вр░жр▒Бр░▓р▒Б",
      drugInteractions: "р░ор░Вр░жр▒Бр░▓ р░кр░░р░╕р▒Нр░кр░░ р░Ър░░р▒Нр░пр░▓р▒Б",
      history: "р░Ър░░р░┐р░др▒Нр░░",
      loadingMedicationManager: "р░ор▒Жр░бр░┐р░Хр▒Зр░╖р░ир▒Н р░ор▒Зр░ир▒Зр░Ьр░░р▒Н р░▓р▒Лр░бр▒Н р░Ер░╡р▒Бр░др▒Лр░Вр░жр░┐",
      preparingMedicationSchedule: "р░ор▒А р░ор░Вр░жр▒Бр░▓ р░╖р▒Жр░бр▒Нр░пр▒Вр░▓р▒Н р░др░пр░╛р░░р▒Б р░Ър▒Зр░пр░мр░бр▒Бр░др▒Лр░Вр░жр░┐ р░ор░░р░┐р░пр▒Б р░кр░░р░╕р▒Нр░кр░░ р░Ър░░р▒Нр░пр░▓р▒Б р░др░ир░┐р░Цр▒А р░Ър▒Зр░пр░мр░бр▒Бр░др▒Бр░ир▒Нр░ир░╛р░пр░┐...",
      todaysMedicationSchedule: "р░ир▒Зр░Яр░┐ р░ор░Вр░жр▒Бр░▓ р░╖р▒Жр░бр▒Нр░пр▒Вр░▓р▒Н",
      pastDue: "р░Чр░бр▒Бр░╡р▒Б р░жр░╛р░Яр░┐р░Вр░жр░┐",
      upcoming: "р░░р░╛р░мр▒Лр░пр▒З",
      scheduled: "р░╖р▒Жр░бр▒Нр░пр▒Вр░▓р▒Н р░Ър▒Зр░пр░мр░бр░┐р░Вр░жр░┐",
      taken: "р░др▒Ар░╕р▒Бр░Хр▒Бр░ир▒Нр░ир░╛р░░р▒Б",
      skip: "р░жр░╛р░Яр░╡р▒Зр░пр░Вр░бр░┐",
      skipped: "р░жр░╛р░Яр░╡р▒Зр░пр░мр░бр░┐р░Вр░жр░┐",
      markAsTaken: "р░др▒Ар░╕р▒Бр░Хр▒Бр░ир▒Нр░ир░Яр▒Нр░▓р▒Б р░ор░╛р░░р▒Нр░Хр▒Н р░Ър▒Зр░пр░Вр░бр░┐",
      medicationsTakenToday: "р░Ир░░р▒Лр░Ьр▒Б р░др▒Ар░╕р▒Бр░Хр▒Бр░ир▒Нр░и р░ор░Вр░жр▒Бр░▓р▒Б",
      totalDosesToday: "р░Ир░░р▒Лр░Ьр▒Б р░ор▒Кр░др▒Нр░др░В р░бр▒Лр░╕р▒Бр░▓р▒Б",
      activeMedications: "р░Хр▒Нр░░р░┐р░пр░╛р░╢р▒Ар░▓ р░ор░Вр░жр▒Бр░▓р▒Б",
      prescribedBy: "р░╕р▒Вр░Ър░┐р░Вр░Ър░┐р░ир░╡р░╛р░░р▒Б",
      dosage: "р░ор▒Лр░др░╛р░жр▒Б",
      frequency: "р░др░░р░Ър▒Бр░жр░ир░В",
      times: "р░╕р░ор░пр░╛р░▓р▒Б",
      startDate: "р░кр▒Нр░░р░╛р░░р░Вр░н р░др▒Зр░жр▒А",
      instructions: "р░╕р▒Вр░Ър░ир░▓р▒Б",
      commonSideEffects: "р░╕р░╛р░зр░╛р░░р░г р░жр▒Бр░╖р▒Нр░кр▒Нр░░р░нр░╛р░╡р░╛р░▓р▒Б",
      viewFullDetails: "р░кр▒Вр░░р▒Нр░др░┐ р░╡р░┐р░╡р░░р░╛р░▓р░ир▒Б р░Ър▒Вр░бр░Вр░бр░┐",
      drugInteractionChecker: "р░ор░Вр░жр▒Бр░▓ р░кр░░р░╕р▒Нр░кр░░ р░Ър░░р▒Нр░п р░др░ир░┐р░Цр▒А",
      interaction: "р░кр░░р░╕р▒Нр░кр░░ р░Ър░░р▒Нр░п",
      recommendation: "р░╕р░┐р░лр░╛р░░р▒Нр░╕р▒Б",
      noDrugInteractionsFound: "р░ор░Вр░жр▒Бр░▓ р░кр░░р░╕р▒Нр░кр░░ р░Ър░░р▒Нр░пр░▓р▒Б р░Хр░ир▒Бр░Чр▒Кр░ир░мр░бр░▓р▒Зр░жр▒Б",
      medicationsAppearSafe: "р░ор▒А р░кр▒Нр░░р░╕р▒Нр░др▒Бр░д р░ор░Вр░жр▒Бр░▓р▒Б р░Хр░▓р░┐р░╕р░┐ р░др▒Ар░╕р▒Бр░Хр▒Лр░╡р░бр░╛р░ир░┐р░Хр░┐ р░╕р▒Бр░░р░Хр▒Нр░╖р░┐р░др░Вр░Чр░╛ р░Хр░ир░┐р░кр░┐р░╕р▒Нр░др▒Бр░ир▒Нр░ир░╛р░пр░┐ред",
      addNewMedication: "р░Хр▒Кр░др▒Нр░д р░ор░Вр░жр▒Б р░Ьр▒Лр░бр░┐р░Вр░Ър░Вр░бр░┐",
      checkInteractionsBeforeStarting: "р░Хр▒Кр░др▒Нр░д р░ор░Вр░жр▒Б р░кр▒Нр░░р░╛р░░р░Вр░нр░┐р░Вр░Ър▒З р░ор▒Бр░Вр░жр▒Б р░кр░░р░╕р▒Нр░кр░░ р░Ър░░р▒Нр░пр░▓р░ир▒Б р░др░ир░┐р░Цр▒А р░Ър▒Зр░пр░Вр░бр░┐",
      enterMedicationName: "р░ор░Вр░жр▒Б р░кр▒Зр░░р▒Б р░ир░ор▒Лр░жр▒Б р░Ър▒Зр░пр░Вр░бр░┐...",
      checkInteractions: "р░кр░░р░╕р▒Нр░кр░░ р░Ър░░р▒Нр░пр░▓р░ир▒Б р░др░ир░┐р░Цр▒А р░Ър▒Зр░пр░Вр░бр░┐",
      medicationAdherenceHistory: "р░ор░Вр░жр▒Бр░▓ р░Хр░Яр▒Нр░Яр▒Бр░мр░╛р░Яр▒Б р░Ър░░р░┐р░др▒Нр░░",
      last30DaysAdherence: "р░Чр░д 30 р░░р▒Лр░Ьр▒Бр░▓ р░Хр░Яр▒Нр░Яр▒Бр░мр░╛р░Яр▒Б",
      sun: "р░Жр░жр░┐",
      mon: "р░╕р▒Лр░о",
      tue: "р░ор░Вр░Чр░│",
      wed: "р░мр▒Бр░з",
      thu: "р░Чр▒Бр░░р▒Б",
      fri: "р░╢р▒Бр░Хр▒Нр░░",
      sat: "р░╢р░ир░┐",
      hundredPercentAdherence: "100% р░Хр░Яр▒Нр░Яр▒Бр░мр░╛р░Яр▒Б",
      seventyToNinetyNineAdherence: "70-99% р░Хр░Яр▒Нр░Яр▒Бр░мр░╛р░Яр▒Б",
      belowSeventyAdherence: "70% р░Хр░Вр░Яр▒З р░др░Хр▒Нр░Хр▒Бр░╡ р░Хр░Яр▒Нр░Яр▒Бр░мр░╛р░Яр▒Б",
      noMedications: "р░ор░Вр░жр▒Бр░▓р▒Б р░▓р▒Зр░╡р▒Б",
      individualMedicationAdherence: "р░╡р▒Нр░пр░Хр▒Нр░др░┐р░Чр░д р░ор░Вр░жр▒Бр░▓ р░Хр░Яр▒Нр░Яр▒Бр░мр░╛р░Яр▒Б",
      dosesTaken: "р░бр▒Лр░╕р▒Бр░▓р▒Б р░др▒Ар░╕р▒Бр░Хр▒Бр░ир▒Нр░ир░╛р░░р▒Б",
      of: "р░▓р▒Л",
      mild: "р░др▒Зр░▓р░┐р░Хр░кр░╛р░Яр░┐",
      moderate: "р░ор░зр▒Нр░пр░╕р▒Нр░е",
      severe: "р░др▒Ар░╡р▒Нр░░р░ор▒Ир░и",
    },
    bengali: {
      smartMedicationManager: "рж╕рзНржорж╛рж░рзНржЯ ржУрж╖рзБржз ржмрзНржпржмрж╕рзНржерж╛ржкржХ",
      aiPoweredMedicationTracking: "AI-ржЪрж╛рж▓рж┐ржд ржУрж╖рзБржз ржЯрзНрж░рзНржпрж╛ржХрж┐ржВ ржПржмржВ ржЗржирзНржЯрж╛рж░ржЕрзНржпрж╛ржХрж╢ржи ржЪрзЗржХрж┐ржВ",
      adherenceScore: "ржорзЗржирзЗ ржЪрж▓рж╛рж░ рж╕рзНржХрзЛрж░",
      excellent: "ЁЯЯв ржЪржорзОржХрж╛рж░",
      good: "ЁЯЯб ржнрж╛рж▓",
      needsImprovement: "ЁЯФ┤ ржЙржирзНржирждрж┐ ржкрзНрж░ржпрж╝рзЛржЬржи",
      today: "ржЖржЬ",
      allMedications: "рж╕ржм ржУрж╖рзБржз",
      drugInteractions: "ржУрж╖рзБржзрзЗрж░ ржкрж╛рж░рж╕рзНржкрж░рж┐ржХ ржХрзНрж░рж┐ржпрж╝рж╛",
      history: "ржЗрждрж┐рж╣рж╛рж╕",
      loadingMedicationManager: "ржУрж╖рзБржз ржмрзНржпржмрж╕рзНржерж╛ржкржХ рж▓рзЛржб рж╣ржЪрзНржЫрзЗ",
      preparingMedicationSchedule: "ржЖржкржирж╛рж░ ржУрж╖рзБржзрзЗрж░ рж╕рзВржЪрж┐ ржкрзНрж░рж╕рзНрждрзБржд ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ ржПржмржВ ржкрж╛рж░рж╕рзНржкрж░рж┐ржХ ржХрзНрж░рж┐ржпрж╝рж╛ ржкрж░рзАржХрзНрж╖рж╛ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...",
      todaysMedicationSchedule: "ржЖржЬржХрзЗрж░ ржУрж╖рзБржзрзЗрж░ рж╕рзВржЪрж┐",
      pastDue: "рж╕ржоржпрж╝ ржкрж╛рж░ рж╣ржпрж╝рзЗржЫрзЗ",
      upcoming: "ржЖрж╕ржирзНржи",
      scheduled: "ржирж┐рж░рзНржзрж╛рж░рж┐ржд",
      taken: "ржЧрзНрж░рж╣ржг ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ",
      skip: "ржПржбрж╝рж┐ржпрж╝рзЗ ржпрж╛ржи",
      skipped: "ржПржбрж╝рж┐ржпрж╝рзЗ ржпрж╛ржУржпрж╝рж╛ рж╣ржпрж╝рзЗржЫрзЗ",
      markAsTaken: "ржЧрзНрж░рж╣ржг ржХрж░рж╛ рж╣рж┐рж╕рзЗржмрзЗ ржЪрж┐рж╣рзНржирж┐ржд ржХрж░рзБржи",
      medicationsTakenToday: "ржЖржЬ ржЧрзНрж░рж╣ржг ржХрж░рж╛ ржУрж╖рзБржз",
      totalDosesToday: "ржЖржЬ ржорзЛржЯ ржбрзЛржЬ",
      activeMedications: "рж╕ржХрзНрж░рж┐ржпрж╝ ржУрж╖рзБржз",
      prescribedBy: "ржжрзНржмрж╛рж░рж╛ ржирж┐рж░рзНржзрж╛рж░рж┐ржд",
      dosage: "ржбрзЛржЬ",
      frequency: "ржлрзНрж░рж┐ржХрзЛржпрж╝рзЗржирзНрж╕рж┐",
      times: "рж╕ржоржпрж╝",
      startDate: "рж╢рзБрж░рзБрж░ рждрж╛рж░рж┐ржЦ",
      instructions: "ржирж┐рж░рзНржжрзЗрж╢рж╛ржмрж▓рзА",
      commonSideEffects: "рж╕рж╛ржзрж╛рж░ржг ржкрж╛рж░рзНрж╢рзНржмржкрзНрж░рждрж┐ржХрзНрж░рж┐ржпрж╝рж╛",
      viewFullDetails: "рж╕ржорзНржкрзВрж░рзНржг ржмрж┐ржмрж░ржг ржжрзЗржЦрзБржи",
      drugInteractionChecker: "ржУрж╖рзБржзрзЗрж░ ржкрж╛рж░рж╕рзНржкрж░рж┐ржХ ржХрзНрж░рж┐ржпрж╝рж╛ ржкрж░рзАржХрзНрж╖ржХ",
      interaction: "ржкрж╛рж░рж╕рзНржкрж░рж┐ржХ ржХрзНрж░рж┐ржпрж╝рж╛",
      recommendation: "рж╕рзБржкрж╛рж░рж┐рж╢",
      noDrugInteractionsFound: "ржХрзЛржи ржУрж╖рзБржзрзЗрж░ ржкрж╛рж░рж╕рзНржкрж░рж┐ржХ ржХрзНрж░рж┐ржпрж╝рж╛ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐",
      medicationsAppearSafe: "ржЖржкржирж╛рж░ ржмрж░рзНрждржорж╛ржи ржУрж╖рзБржзржЧрзБрж▓рж┐ ржПржХрж╕рж╛ржерзЗ ржЧрзНрж░рж╣ржг ржХрж░рж╛рж░ ржЬржирзНржп ржирж┐рж░рж╛ржкржж ржмрж▓рзЗ ржоржирзЗ рж╣ржЪрзНржЫрзЗред",
      addNewMedication: "ржирждрзБржи ржУрж╖рзБржз ржпрзЛржЧ ржХрж░рзБржи",
      checkInteractionsBeforeStarting: "ржирждрзБржи ржУрж╖рзБржз рж╢рзБрж░рзБ ржХрж░рж╛рж░ ржЖржЧрзЗ ржкрж╛рж░рж╕рзНржкрж░рж┐ржХ ржХрзНрж░рж┐ржпрж╝рж╛ ржкрж░рзАржХрзНрж╖рж╛ ржХрж░рзБржи",
      enterMedicationName: "ржУрж╖рзБржзрзЗрж░ ржирж╛ржо рж▓рж┐ржЦрзБржи...",
      checkInteractions: "ржкрж╛рж░рж╕рзНржкрж░рж┐ржХ ржХрзНрж░рж┐ржпрж╝рж╛ ржкрж░рзАржХрзНрж╖рж╛ ржХрж░рзБржи",
      medicationAdherenceHistory: "ржУрж╖рзБржз ржорзЗржирзЗ ржЪрж▓рж╛рж░ ржЗрждрж┐рж╣рж╛рж╕",
      last30DaysAdherence: "ржЧржд рзйрзж ржжрж┐ржирзЗрж░ ржорзЗржирзЗ ржЪрж▓рж╛",
      sun: "рж░ржмрж┐",
      mon: "рж╕рзЛржо",
      tue: "ржоржЩрзНржЧрж▓",
      wed: "ржмрзБржз",
      thu: "ржмрзГрж╣рж╕рзНржкрждрж┐",
      fri: "рж╢рзБржХрзНрж░",
      sat: "рж╢ржирж┐",
      hundredPercentAdherence: "рззрзжрзж% ржорзЗржирзЗ ржЪрж▓рж╛",
      seventyToNinetyNineAdherence: "рзнрзж-рзпрзп% ржорзЗржирзЗ ржЪрж▓рж╛",
      belowSeventyAdherence: "рзнрзж% ржПрж░ ржирж┐ржЪрзЗ ржорзЗржирзЗ ржЪрж▓рж╛",
      noMedications: "ржХрзЛржи ржУрж╖рзБржз ржирзЗржЗ",
      individualMedicationAdherence: "ржмрзНржпржХрзНрждрж┐ржЧржд ржУрж╖рзБржз ржорзЗржирзЗ ржЪрж▓рж╛",
      dosesTaken: "ржбрзЛржЬ ржЧрзНрж░рж╣ржг ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ",
      of: "ржПрж░",
      mild: "ржорзГржжрзБ",
      moderate: "ржоржзрзНржпржо",
      severe: "рждрзАржмрзНрж░",
    },
  };

  const getLocalText = (key: keyof typeof texts.english): string => {
    return (
      texts[currentLanguage as keyof typeof texts]?.[key] ||
      texts.english[key]
    );
  };

  useEffect(() => {
    loadMedicationData();
    generateTodayReminders();
    checkDrugInteractions();
  }, []);

  const loadMedicationData = async () => {
    setIsLoading(true);
    await new Promise((resolve) => setTimeout(resolve, 1500));

    const mockMedications: Medication[] = [
      {
        id: "med1",
        name: "Metformin",
        dosage: "500mg",
        frequency: "Twice daily",
        times: ["08:00", "20:00"],
        taken: generateMedicationHistory(),
        startDate: "2025-01-01",
        prescribedBy: "Dr. Smith",
        instructions: "Take with food to reduce stomach upset",
        sideEffects: ["Nausea", "Diarrhea", "Metallic taste"],
        interactions: ["Alcohol", "Contrast dye"],
      },
      {
        id: "med2",
        name: "Lisinopril",
        dosage: "10mg",
        frequency: "Once daily",
        times: ["08:00"],
        taken: generateMedicationHistory(),
        startDate: "2025-01-15",
        prescribedBy: "Dr. Johnson",
        instructions: "Take at the same time each day",
        sideEffects: ["Dry cough", "Dizziness", "Fatigue"],
        interactions: ["NSAIDs", "Potassium supplements"],
      },
      {
        id: "med3",
        name: "Vitamin D3",
        dosage: "2000 IU",
        frequency: "Once daily",
        times: ["09:00"],
        taken: generateMedicationHistory(),
        startDate: "2025-02-01",
        prescribedBy: "Dr. Wilson",
        instructions: "Take with fat-containing meal for better absorption",
        sideEffects: ["Constipation (rare)", "Kidney stones (with high doses)"],
        interactions: ["Thiazide diuretics"],
      },
      {
        id: "med4",
        name: "Omega-3",
        dosage: "1000mg",
        frequency: "Once daily",
        times: ["19:00"],
        taken: generateMedicationHistory(),
        startDate: "2025-01-10",
        prescribedBy: "Dr. Brown",
        instructions: "Take with evening meal",
        sideEffects: ["Fishy aftertaste", "Stomach upset"],
        interactions: ["Blood thinners"],
      },
    ];

    setMedications(mockMedications);
    calculateAdherenceScore(mockMedications);
    setIsLoading(false);
  };

  const generateMedicationHistory = () => {
    const history: { [date: string]: boolean[] } = {};
    for (let i = 30; i >= 0; i--) {
      const date = new Date();
      date.setDate(date.getDate() - i);
      const dateStr = date.toISOString().split("T")[0];
      // Simulate 85% adherence rate
      history[dateStr] = [Math.random() > 0.15, Math.random() > 0.15];
    }
    return history;
  };

  const generateTodayReminders = () => {
    const today = new Date().toISOString().split("T")[0];
    const reminders: Reminder[] = [];

    medications.forEach((med) => {
      med.times.forEach((time, index) => {
        const [hours, minutes] = time.split(":").map(Number);
        const reminderTime = new Date();
        reminderTime.setHours(hours, minutes, 0, 0);

        reminders.push({
          id: `${med.id}-${index}`,
          medicationId: med.id,
          time: time,
          taken: med.taken[today]?.[index] || false,
          skipped: false,
          timestamp: reminderTime,
        });
      });
    });

    setTodayReminders(
      reminders.sort((a, b) => a.timestamp.getTime() - b.timestamp.getTime()),
    );
  };

  const checkDrugInteractions = () => {
    const drugInteractions: DrugInteraction[] = [
      {
        severity: "moderate",
        description:
          "Metformin and alcohol can increase risk of lactic acidosis",
        medications: ["Metformin", "Alcohol"],
        recommendation: "Limit alcohol consumption while taking Metformin",
      },
      {
        severity: "mild",
        description: "Omega-3 may enhance the effects of blood thinners",
        medications: ["Omega-3", "Blood thinners"],
        recommendation:
          "Monitor for increased bleeding risk, consult doctor if taking anticoagulants",
      },
    ];

    setInteractions(drugInteractions);
  };

  const calculateAdherenceScore = (meds: Medication[]) => {
    let totalDoses = 0;
    let takenDoses = 0;

    meds.forEach((med) => {
      Object.values(med.taken).forEach((dailyDoses) => {
        totalDoses += dailyDoses.length;
        takenDoses += dailyDoses.filter((taken) => taken).length;
      });
    });

    const score =
      totalDoses > 0 ? Math.round((takenDoses / totalDoses) * 100) : 0;
    setAdherenceScore(score);
  };

  const markMedicationTaken = (reminderId: string, taken: boolean) => {
    const today = new Date().toISOString().split("T")[0];
    const reminder = todayReminders.find((r) => r.id === reminderId);

    if (reminder) {
      // Update reminder
      setTodayReminders((prev) =>
        prev.map((r) =>
          r.id === reminderId ? { ...r, taken, skipped: !taken } : r,
        ),
      );

      // Update medication history
      const timeIndex =
        medications
          .find((m) => m.id === reminder.medicationId)
          ?.times.indexOf(reminder.time) || 0;

      setMedications((prev) =>
        prev.map((med) => {
          if (med.id === reminder.medicationId) {
            const updatedTaken = { ...med.taken };
            if (!updatedTaken[today]) {
              updatedTaken[today] = new Array(med.times.length).fill(false);
            }
            updatedTaken[today][timeIndex] = taken;
            return { ...med, taken: updatedTaken };
          }
          return med;
        }),
      );
    }

    // Recalculate adherence
    setTimeout(() => calculateAdherenceScore(medications), 100);
  };

  const getAdherenceColor = (score: number) => {
    if (score >= 90) return "text-green-600 bg-green-100";
    if (score >= 70) return "text-yellow-600 bg-yellow-100";
    return "text-red-600 bg-red-100";
  };

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case "mild":
        return "border-yellow-400 bg-yellow-50";
      case "moderate":
        return "border-orange-400 bg-orange-50";
      case "severe":
        return "border-red-400 bg-red-50";
      default:
        return "border-gray-400 bg-gray-50";
    }
  };

  const speakReminder = (medication: Medication, time: string) => {
    if ("speechSynthesis" in window) {
      const text = `Time to take your ${medication.name}, ${medication.dosage}. ${medication.instructions}`;
      const utterance = new SpeechSynthesisUtterance(text);
      utterance.rate = 0.8;
      speechSynthesis.speak(utterance);
    }
  };

  if (isLoading) {
    return (
      <div className="max-w-6xl mx-auto p-6">
        <div className="bg-white rounded-xl shadow-lg p-8 text-center">
          <div className="animate-spin w-16 h-16 border-4 border-blue-600 border-t-transparent rounded-full mx-auto mb-4"></div>
          <h2 className="text-xl font-semibold text-gray-700 mb-2">
            {getLocalText("loadingMedicationManager")}
          </h2>
          <p className="text-gray-500">
            {getLocalText("preparingMedicationSchedule")}
          </p>
        </div>
      </div>
    );
  }

  return (
    <div className="max-w-6xl mx-auto p-6 space-y-6">
      {/* Header with Adherence Score */}
      <div className="bg-gradient-to-r from-blue-600 to-purple-600 rounded-2xl p-6 text-white">
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-2xl font-bold mb-2">
              ЁЯТК {getLocalText("smartMedicationManager")}
            </h1>
            <p className="text-blue-100">
              {getLocalText("aiPoweredMedicationTracking")}
            </p>
          </div>
          <div className="text-center">
            <div className="text-3xl font-bold mb-1">{adherenceScore}%</div>
            <div className="text-blue-100 text-sm">{getLocalText("adherenceScore")}</div>
            <div
              className={`inline-flex items-center px-3 py-1 rounded-full text-sm font-medium mt-2 ${getAdherenceColor(adherenceScore).replace("text-", "text-").replace("bg-", "bg-opacity-20 bg-")}`}
            >
              {adherenceScore >= 90
                ? getLocalText("excellent")
                : adherenceScore >= 70
                  ? getLocalText("good")
                  : getLocalText("needsImprovement")}
            </div>
          </div>
        </div>
      </div>

      {/* Navigation Tabs */}
      <div className="bg-white rounded-xl shadow-lg p-1">
        <div className="flex space-x-1">
          {[
            { id: "today", name: getLocalText("today"), icon: "ЁЯУЕ" },
            { id: "medications", name: getLocalText("allMedications"), icon: "ЁЯТК" },
            { id: "interactions", name: getLocalText("drugInteractions"), icon: "тЪая╕П" },
            { id: "history", name: getLocalText("history"), icon: "ЁЯУК" },
          ].map((tab) => (
            <button
              key={tab.id}
              onClick={() => setActiveTab(tab.id)}
              className={`flex items-center space-x-2 px-4 py-2 rounded-lg font-medium transition-all ${
                activeTab === tab.id
                  ? "bg-blue-600 text-white shadow-md"
                  : "text-gray-600 hover:bg-gray-100"
              }`}
            >
              <span>{tab.icon}</span>
              <span>{tab.name}</span>
            </button>
          ))}
        </div>
      </div>

      {/* Today's Medications Tab */}
      {activeTab === "today" && (
        <div className="space-y-6">
          {/* Today's Schedule */}
          <div className="bg-white rounded-xl shadow-lg p-6">
            <h2 className="text-xl font-semibold mb-4">
              ЁЯХР {getLocalText("todaysMedicationSchedule")}
            </h2>
            <div className="space-y-3">
              {todayReminders.map((reminder) => {
                const medication = medications.find(
                  (m) => m.id === reminder.medicationId,
                );
                if (!medication) return null;

                const now = new Date();
                const reminderTime = reminder.timestamp;
                const isPast = now > reminderTime;
                const isUpcoming =
                  Math.abs(now.getTime() - reminderTime.getTime()) <
                  30 * 60 * 1000; // 30 minutes

                return (
                  <div
                    key={reminder.id}
                    className={`p-4 rounded-lg border-2 ${
                      reminder.taken
                        ? "border-green-400 bg-green-50"
                        : reminder.skipped
                          ? "border-red-400 bg-red-50"
                          : isPast
                            ? "border-yellow-400 bg-yellow-50"
                            : isUpcoming
                              ? "border-blue-400 bg-blue-50 animate-pulse"
                              : "border-gray-200 bg-white"
                    }`}
                  >
                    <div className="flex items-center justify-between">
                      <div className="flex items-center space-x-4">
                        <div className="text-center">
                          <div className="text-lg font-bold text-gray-900">
                            {reminder.time}
                          </div>
                          <div className="text-xs text-gray-600">
                            {isPast
                              ? getLocalText("pastDue")
                              : isUpcoming
                                ? getLocalText("upcoming")
                                : getLocalText("scheduled")}
                          </div>
                        </div>
                        <div>
                          <h3 className="font-semibold text-lg">
                            {medication.name}
                          </h3>
                          <p className="text-gray-600">
                            {medication.dosage} - {medication.frequency}
                          </p>
                          <p className="text-sm text-gray-500">
                            {medication.instructions}
                          </p>
                        </div>
                      </div>

                      <div className="flex items-center space-x-2">
                        {isUpcoming && (
                          <button
                            onClick={() =>
                              speakReminder(medication, reminder.time)
                            }
                            className="p-2 bg-blue-100 text-blue-600 rounded-lg hover:bg-blue-200"
                            title="Play reminder"
                          >
                            ЁЯФК
                          </button>
                        )}

                        {!reminder.taken && !reminder.skipped && (
                          <>
                            <button
                              onClick={() =>
                                markMedicationTaken(reminder.id, true)
                              }
                              className="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700"
                            >
                              тЬЕ {getLocalText("taken")}
                            </button>
                            <button
                              onClick={() =>
                                markMedicationTaken(reminder.id, false)
                              }
                              className="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700"
                            >
                              тЭМ {getLocalText("skip")}
                            </button>
                          </>
                        )}

                        {reminder.taken && (
                          <div className="flex items-center space-x-2 text-green-600">
                            <span>тЬЕ</span>
                            <span className="font-medium">{getLocalText("taken")}</span>
                          </div>
                        )}

                        {reminder.skipped && (
                          <div className="flex items-center space-x-2 text-red-600">
                            <span>тЭМ</span>
                            <span className="font-medium">{getLocalText("skipped")}</span>
                            <button
                              onClick={() =>
                                markMedicationTaken(reminder.id, true)
                              }
                              className="text-sm underline"
                            >
                              {getLocalText("markAsTaken")}
                            </button>
                          </div>
                        )}
                      </div>
                    </div>
                  </div>
                );
              })}
            </div>
          </div>

          {/* Quick Stats */}
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div className="bg-white rounded-xl shadow-lg p-6 text-center">
              <div className="text-3xl font-bold text-green-600 mb-2">
                {todayReminders.filter((r) => r.taken).length}
              </div>
              <div className="text-gray-600">{getLocalText("medicationsTakenToday")}</div>
            </div>
            <div className="bg-white rounded-xl shadow-lg p-6 text-center">
              <div className="text-3xl font-bold text-blue-600 mb-2">
                {todayReminders.length}
              </div>
              <div className="text-gray-600">{getLocalText("totalDosesToday")}</div>
            </div>
            <div className="bg-white rounded-xl shadow-lg p-6 text-center">
              <div className="text-3xl font-bold text-purple-600 mb-2">
                {medications.length}
              </div>
              <div className="text-gray-600">{getLocalText("activeMedications")}</div>
            </div>
          </div>
        </div>
      )}

      {/* All Medications Tab */}
      {activeTab === "medications" && (
        <div className="space-y-6">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            {medications.map((medication) => (
              <div
                key={medication.id}
                className="bg-white rounded-xl shadow-lg p-6"
              >
                <div className="flex items-center justify-between mb-4">
                  <h3 className="text-xl font-semibold">{medication.name}</h3>
                  <span className="text-sm text-gray-500">
                    Prescribed by {medication.prescribedBy}
                  </span>
                </div>

                <div className="space-y-3 mb-4">
                  <div className="flex justify-between">
                    <span className="text-gray-600">Dosage:</span>
                    <span className="font-medium">{medication.dosage}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-600">Frequency:</span>
                    <span className="font-medium">{medication.frequency}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-600">Times:</span>
                    <span className="font-medium">
                      {medication.times.join(", ")}
                    </span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-600">Start Date:</span>
                    <span className="font-medium">
                      {new Date(medication.startDate).toLocaleDateString()}
                    </span>
                  </div>
                </div>

                <div className="mb-4">
                  <h4 className="font-medium text-gray-800 mb-2">
                    Instructions:
                  </h4>
                  <p className="text-sm text-gray-600 bg-gray-50 p-2 rounded">
                    {medication.instructions}
                  </p>
                </div>

                <div className="mb-4">
                  <h4 className="font-medium text-gray-800 mb-2">
                    Common Side Effects:
                  </h4>
                  <div className="flex flex-wrap gap-1">
                    {medication.sideEffects.map((effect, index) => (
                      <span
                        key={index}
                        className="px-2 py-1 bg-yellow-100 text-yellow-800 rounded text-xs"
                      >
                        {effect}
                      </span>
                    ))}
                  </div>
                </div>

                <button className="w-full py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors">
                  View Full Details
                </button>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* Drug Interactions Tab */}
      {activeTab === "interactions" && (
        <div className="space-y-6">
          <div className="bg-white rounded-xl shadow-lg p-6">
            <h2 className="text-xl font-semibold mb-4">
              тЪая╕П Drug Interaction Checker
            </h2>

            {interactions.length > 0 ? (
              <div className="space-y-4">
                {interactions.map((interaction, index) => (
                  <div
                    key={index}
                    className={`p-4 rounded-lg border-2 ${getSeverityColor(interaction.severity)}`}
                  >
                    <div className="flex items-start justify-between mb-3">
                      <h3 className="font-semibold text-lg">
                        {interaction.severity === "severe"
                          ? "ЁЯЪи"
                          : interaction.severity === "moderate"
                            ? "тЪая╕П"
                            : "ЁЯТб"}{" "}
                        {interaction.severity.charAt(0).toUpperCase() +
                          interaction.severity.slice(1)}{" "}
                        Interaction
                      </h3>
                      <span className="text-sm text-gray-600">
                        {interaction.medications.join(" + ")}
                      </span>
                    </div>

                    <p className="text-gray-700 mb-3">
                      {interaction.description}
                    </p>

                    <div className="bg-white p-3 rounded border-l-4 border-blue-400">
                      <h4 className="font-medium text-blue-800 mb-1">
                        Recommendation:
                      </h4>
                      <p className="text-blue-700 text-sm">
                        {interaction.recommendation}
                      </p>
                    </div>
                  </div>
                ))}
              </div>
            ) : (
              <div className="text-center py-8">
                <span className="text-6xl mb-4 block">тЬЕ</span>
                <h3 className="text-lg font-semibold text-green-600 mb-2">
                  No Drug Interactions Found
                </h3>
                <p className="text-gray-600">
                  Your current medications appear to be safe to take together.
                </p>
              </div>
            )}

            {/* Add New Medication Check */}
            <div className="mt-6 p-4 bg-blue-50 rounded-lg">
              <h3 className="font-medium text-blue-800 mb-2">
                Add New Medication
              </h3>
              <p className="text-blue-700 text-sm mb-3">
                Check for interactions before starting a new medication
              </p>
              <div className="flex space-x-2">
                <input
                  type="text"
                  placeholder="Enter medication name..."
                className="flex-1 px-3 py-2 border border-blue-300 rounded-lg focus:ring-2 focus:ring-blue-500 text-gray-500"
                />
                <button className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700">
                  Check Interactions
                </button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* History Tab */}
      {activeTab === "history" && (
        <div className="space-y-6">
          <div className="bg-white rounded-xl shadow-lg p-6">
            <h2 className="text-xl font-semibold mb-4">
              ЁЯУК Medication Adherence History
            </h2>

            {/* Adherence Chart */}
            <div className="mb-6">
              <h3 className="font-medium mb-3">Last 30 Days Adherence</h3>
              <div className="grid grid-cols-7 gap-1 mb-2">
                {["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"].map(
                  (day) => (
                    <div
                      key={day}
                      className="text-center text-xs text-gray-500 p-1"
                    >
                      {day}
                    </div>
                  ),
                )}
              </div>
              <div className="grid grid-cols-7 gap-1">
                {Array.from({ length: 30 }, (_, i) => {
                  const date = new Date();
                  date.setDate(date.getDate() - (29 - i));
                  const dateStr = date.toISOString().split("T")[0];

                  // Calculate adherence for this day
                  let totalDoses = 0;
                  let takenDoses = 0;

                  medications.forEach((med) => {
                    if (med.taken[dateStr]) {
                      totalDoses += med.taken[dateStr].length;
                      takenDoses += med.taken[dateStr].filter(
                        (taken) => taken,
                      ).length;
                    }
                  });

                  const adherence =
                    totalDoses > 0 ? takenDoses / totalDoses : 0;

                  return (
                    <div
                      key={i}
                      className={`w-8 h-8 rounded text-xs flex items-center justify-center font-medium ${
                        adherence === 1
                          ? "bg-green-500 text-white"
                          : adherence >= 0.7
                            ? "bg-yellow-500 text-white"
                            : adherence > 0
                              ? "bg-red-500 text-white"
                              : "bg-gray-200"
                      }`}
                      title={`${date.toLocaleDateString()}: ${Math.round(adherence * 100)}% adherence`}
                    >
                      {Math.round(adherence * 100)}
                    </div>
                  );
                })}
              </div>
              <div className="flex items-center justify-center space-x-4 mt-4 text-xs">
                <div className="flex items-center space-x-1">
                  <div className="w-3 h-3 bg-green-500 rounded"></div>
                  <span>100% adherence</span>
                </div>
                <div className="flex items-center space-x-1">
                  <div className="w-3 h-3 bg-yellow-500 rounded"></div>
                  <span>70-99% adherence</span>
                </div>
                <div className="flex items-center space-x-1">
                  <div className="w-3 h-3 bg-red-500 rounded"></div>
                  <span>Below 70% adherence</span>
                </div>
                <div className="flex items-center space-x-1">
                  <div className="w-3 h-3 bg-gray-200 rounded"></div>
                  <span>No medications</span>
                </div>
              </div>
            </div>

            {/* Individual Medication History */}
            <div className="space-y-4">
              <h3 className="font-medium">Individual Medication Adherence</h3>
              {medications.map((medication) => {
                const totalDoses = Object.values(medication.taken).reduce(
                  (sum, daily) => sum + daily.length,
                  0,
                );
                const takenDoses = Object.values(medication.taken).reduce(
                  (sum, daily) => sum + daily.filter((taken) => taken).length,
                  0,
                );
                const adherencePercent =
                  totalDoses > 0
                    ? Math.round((takenDoses / totalDoses) * 100)
                    : 0;

                return (
                  <div
                    key={medication.id}
                    className="p-4 border border-gray-200 rounded-lg"
                  >
                    <div className="flex items-center justify-between mb-2">
                      <h4 className="font-medium">{medication.name}</h4>
                      <span
                        className={`px-2 py-1 rounded-full text-sm font-medium ${getAdherenceColor(adherencePercent)}`}
                      >
                        {adherencePercent}%
                      </span>
                    </div>
                    <div className="w-full bg-gray-200 rounded-full h-2">
                      <div
                        className={`h-2 rounded-full transition-all duration-500 ${
                          adherencePercent >= 90
                            ? "bg-green-500"
                            : adherencePercent >= 70
                              ? "bg-yellow-500"
                              : "bg-red-500"
                        }`}
                        style={{ width: `${adherencePercent}%` }}
                      />
                    </div>
                    <div className="text-sm text-gray-600 mt-1">
                      {takenDoses} of {totalDoses} doses taken
                    </div>
                  </div>
                );
              })}
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
